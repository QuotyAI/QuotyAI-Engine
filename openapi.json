{
  "openapi": "3.0.0",
  "paths": {
    "/pricing-agents": {
      "post": {
        "operationId": "PricingAgentsController_createPricingAgent",
        "parameters": [
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID (required in multi-tenant mode)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePricingAgentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pricing agent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingAgentWithLatestCheckpoint"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Create a new pricing agent",
        "tags": [
          "pricing-agents"
        ]
      },
      "get": {
        "operationId": "PricingAgentsController_getPricingAgents",
        "parameters": [
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID (required in multi-tenant mode)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pricing agents retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricingAgentWithLatestCheckpoint"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - tenantId required in multi-tenant mode"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get all pricing agents for a tenant",
        "tags": [
          "pricing-agents"
        ]
      }
    },
    "/pricing-agents/{id}": {
      "get": {
        "operationId": "PricingAgentsController_getPricingAgent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Pricing agent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID (required in multi-tenant mode)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pricing agent retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingAgent"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - tenantId required in multi-tenant mode"
          },
          "404": {
            "description": "Pricing agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get a specific pricing agent by ID",
        "tags": [
          "pricing-agents"
        ]
      },
      "put": {
        "operationId": "PricingAgentsController_updatePricingAgent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Pricing agent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID (required in multi-tenant mode)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pricing agent updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingAgent"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - tenantId required in multi-tenant mode"
          },
          "404": {
            "description": "Pricing agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Update a pricing agent",
        "tags": [
          "pricing-agents"
        ]
      },
      "delete": {
        "operationId": "PricingAgentsController_deletePricingAgent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Pricing agent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID (required in multi-tenant mode)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pricing agent deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deleted": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - tenantId required in multi-tenant mode"
          },
          "404": {
            "description": "Pricing agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Delete a pricing agent",
        "tags": [
          "pricing-agents"
        ]
      }
    },
    "/pricing-agents/{agentId}/messages": {
      "post": {
        "operationId": "PricingAgentsController_addInputMessage",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "Pricing agent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkpointId",
            "required": false,
            "in": "query",
            "description": "Checkpoint ID (optional, uses latest if not provided)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddHumanInputMessageDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Input message added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingAgentCheckpoint"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingAgentCheckpoint"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - no valid input provided"
          },
          "404": {
            "description": "Pricing agent or checkpoint not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Add input message to pricing agent",
        "tags": [
          "pricing-agents"
        ]
      }
    },
    "/pricing-agents/{agentId}/checkpoints/{checkpointId}/messages/{messageId}": {
      "delete": {
        "operationId": "PricingAgentsController_deleteInputMessage",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "Pricing agent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkpointId",
            "required": true,
            "in": "path",
            "description": "Checkpoint ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "description": "Message ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingAgentCheckpoint"
                }
              }
            }
          },
          "404": {
            "description": "Pricing agent, checkpoint, or message not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Delete an input message from a checkpoint",
        "tags": [
          "pricing-agents"
        ]
      }
    },
    "/pricing-agents/{agentId}/build": {
      "post": {
        "operationId": "PricingAgentsController_buildAgent",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "Pricing agent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkpointId",
            "required": false,
            "in": "query",
            "description": "Checkpoint ID (optional, uses latest if not provided)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent built successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingAgentCheckpoint"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingAgentCheckpoint"
                }
              }
            }
          },
          "404": {
            "description": "Pricing agent or checkpoint not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Build a complete pricing agent with schema and formula",
        "tags": [
          "pricing-agents"
        ]
      }
    },
    "/pricing-agents/{agentId}/build/schema": {
      "post": {
        "operationId": "PricingAgentsController_buildSchema",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "Pricing agent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkpointId",
            "required": false,
            "in": "query",
            "description": "Checkpoint ID (optional, uses latest if not provided)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schema built successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "functionSchema": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": ""
          },
          "404": {
            "description": "Pricing agent or checkpoint not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Build schema only for pricing agent",
        "tags": [
          "pricing-agents"
        ]
      }
    },
    "/pricing-agents/{agentId}/build/formula": {
      "post": {
        "operationId": "PricingAgentsController_buildFormula",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "Pricing agent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkpointId",
            "required": false,
            "in": "query",
            "description": "Checkpoint ID (optional, uses latest if not provided)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Formula built successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingAgentCheckpoint"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingAgentCheckpoint"
                }
              }
            }
          },
          "404": {
            "description": "Pricing agent or checkpoint not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Build formula only for pricing agent",
        "tags": [
          "pricing-agents"
        ]
      }
    },
    "/pricing-agents/{agentId}/checkpoints": {
      "get": {
        "operationId": "PricingAgentsController_getPricingAgentCheckpoints",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "Pricing agent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of checkpoints to return (default: 50)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checkpoints retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricingAgentCheckpoint"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Pricing agent not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get latest checkpoints for a pricing agent",
        "tags": [
          "pricing-agents"
        ]
      }
    },
    "/pricing-agents/{agentId}/checkpoints/{checkpointId}": {
      "get": {
        "operationId": "PricingAgentsController_getPricingAgentCheckpoint",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "Pricing agent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkpointId",
            "required": true,
            "in": "path",
            "description": "Checkpoint ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checkpoint retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingAgentCheckpoint"
                }
              }
            }
          },
          "404": {
            "description": "Pricing agent or checkpoint not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get full checkpoint data by ID",
        "tags": [
          "pricing-agents"
        ]
      }
    },
    "/pricing-agents/{agentId}/checkpoints/{checkpointId}/datasets/{datasetId}": {
      "post": {
        "operationId": "PricingAgentsController_assignTestingDataset",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "Pricing agent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasetId",
            "required": true,
            "in": "path",
            "description": "Testing dataset ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Testing dataset assigned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentResultDto"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - dataset already assigned or invalid parameters"
          },
          "404": {
            "description": "Pricing agent, checkpoint, or dataset not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Assign a testing dataset to a pricing agent checkpoint",
        "tags": [
          "pricing-agents"
        ]
      }
    },
    "/pricing-agents/pricing-agents/{agentId}/build/dataset": {
      "post": {
        "operationId": "PricingAgentsController_aiGenerateDataset",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "Pricing agent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkpointId",
            "required": false,
            "in": "query",
            "description": "Checkpoint ID (optional, uses latest if not provided)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dataset generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestingDatasetWithTestsDto"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestingDatasetWithTestsDto"
                }
              }
            }
          },
          "404": {
            "description": "Pricing agent or checkpoint not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "AI generate testing dataset",
        "tags": [
          "pricing-agents"
        ]
      }
    },
    "/playground/pricing-agents/{agentId}/playground": {
      "post": {
        "operationId": "PlaygroundController_executePlayground",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "Pricing agent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkpointId",
            "required": false,
            "in": "query",
            "description": "Checkpoint ID (optional, uses latest if not provided)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaygroundExecutionRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaygroundExecutionResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaygroundExecutionResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input"
          },
          "404": {
            "description": "Pricing agent or checkpoint not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Execute agent with natural language input for playground testing",
        "tags": [
          "playground"
        ]
      }
    },
    "/playground/pricing-agents/{agentId}/demo-conversation": {
      "post": {
        "operationId": "PlaygroundController_generateDemoConversation",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "Pricing agent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkpointId",
            "required": false,
            "in": "query",
            "description": "Checkpoint ID (optional, uses latest if not provided)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Demo conversation generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DemoConversationResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DemoConversationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Pricing agent or checkpoint not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Generate a demo conversation for the pricing agent",
        "tags": [
          "playground"
        ]
      }
    },
    "/datasets": {
      "get": {
        "operationId": "DatasetsController_findTestingDatasets",
        "parameters": [
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Filter by tenant ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkpointId",
            "required": false,
            "in": "query",
            "description": "Filter by checkpoint ID (optional)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Search by dataset name (case-insensitive)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "required": false,
            "in": "query",
            "description": "Search by dataset description (case-insensitive)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of results to return",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Testing datasets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestingDataset"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - tenantId is required"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Search testing datasets with flexible criteria",
        "tags": [
          "datasets"
        ]
      },
      "post": {
        "operationId": "DatasetsController_createTestingDataset",
        "parameters": [
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTestingDatasetDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Testing dataset created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestingDataset"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Create a new testing dataset",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/{id}": {
      "get": {
        "operationId": "DatasetsController_getTestingDataset",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Testing dataset ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Testing dataset retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestingDataset"
                }
              }
            }
          },
          "404": {
            "description": "Testing dataset not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get a specific testing dataset by ID",
        "tags": [
          "datasets"
        ]
      },
      "put": {
        "operationId": "DatasetsController_updateTestingDataset",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Testing dataset ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Testing dataset updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestingDataset"
                }
              }
            }
          },
          "404": {
            "description": "Testing dataset not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Update a testing dataset",
        "tags": [
          "datasets"
        ]
      },
      "delete": {
        "operationId": "DatasetsController_deleteTestingDataset",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Testing dataset ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Testing dataset deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deleted": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Testing dataset not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Delete a testing dataset",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/{id}/with-tests": {
      "get": {
        "operationId": "DatasetsController_getTestingDatasetWithTests",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Testing dataset ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Testing dataset with tests retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestingDatasetWithTestsDto"
                }
              }
            }
          },
          "404": {
            "description": "Testing dataset not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get a specific testing dataset by ID with loaded tests",
        "tags": [
          "datasets"
        ]
      }
    },
    "/testsets/{agentId}/{checkpointId}/testset": {
      "get": {
        "operationId": "TestsetsController_getCheckpointTestset",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "Pricing agent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkpointId",
            "required": true,
            "in": "path",
            "description": "Checkpoint ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Testset retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckpointTestsetDto"
                }
              }
            }
          },
          "404": {
            "description": "Pricing agent or checkpoint not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Get checkpoint testset with test data",
        "tags": [
          "testsets"
        ]
      },
      "post": {
        "operationId": "TestsetsController_aiGenerateCheckpointTestsetFromAssignedDatasets",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "Pricing agent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkpointId",
            "required": true,
            "in": "path",
            "description": "Checkpoint ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Testset generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckpointTestsetDto"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckpointTestsetDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - no assigned datasets or missing schema"
          },
          "404": {
            "description": "Pricing agent or checkpoint not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "AI generate testset from assigned datasets",
        "tags": [
          "testsets"
        ]
      }
    },
    "/testsets/pricing-agents/{agentId}/test": {
      "post": {
        "operationId": "TestsetsController_runCheckpointTestset",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "Pricing agent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkpointId",
            "required": true,
            "in": "path",
            "description": "Checkpoint ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-ID",
            "required": false,
            "in": "header",
            "description": "Tenant ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "failFast",
            "required": false,
            "in": "query",
            "description": "Stop execution on first unexpected failure",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tests executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckpointTestsetDto"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckpointTestsetDto"
                }
              }
            }
          },
          "404": {
            "description": "Pricing agent or checkpoint not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Runs checkpoint testset",
        "tags": [
          "testsets"
        ]
      }
    },
    "/extraction/extract": {
      "post": {
        "operationId": "ExtractionController_extractPricingTable",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PricingTableExtractionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pricing table extracted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractedPricingTable"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractedPricingTable"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid image data"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Extract pricing table from image",
        "tags": [
          "extraction"
        ]
      }
    },
    "/user-tenants/tenants": {
      "post": {
        "operationId": "TenantController_createUserTenant",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tenant created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              }
            }
          }
        },
        "summary": "Create a new tenant for user",
        "tags": [
          "User Tenants"
        ]
      },
      "get": {
        "operationId": "TenantController_getUserTenants",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of tenants for the authenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all tenants for the authenticated user",
        "tags": [
          "User Tenants"
        ]
      }
    },
    "/user-tenants/tenants/{id}": {
      "get": {
        "operationId": "TenantController_getUserTenantById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found"
          }
        },
        "summary": "Get tenant by ID",
        "tags": [
          "User Tenants"
        ]
      },
      "put": {
        "operationId": "TenantController_updateUserTenant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTenantDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tenant updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              }
            }
          }
        },
        "summary": "Update tenant",
        "tags": [
          "User Tenants"
        ]
      },
      "delete": {
        "operationId": "TenantController_deleteUserTenant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponseDto"
                }
              }
            }
          }
        },
        "summary": "Delete tenant (soft delete)",
        "tags": [
          "User Tenants"
        ]
      }
    },
    "/user-tenants/{tenantId}/users": {
      "post": {
        "operationId": "TenantController_assignUserToTenant",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignUserToTenantDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User assigned to tenant successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTenantDto"
                }
              }
            }
          }
        },
        "summary": "Assign authenticated user to tenant",
        "tags": [
          "User Tenants"
        ]
      },
      "delete": {
        "operationId": "TenantController_removeUserFromTenant",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User removed from tenant successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponseDto"
                }
              }
            }
          }
        },
        "summary": "Remove authenticated user from tenant",
        "tags": [
          "User Tenants"
        ]
      },
      "get": {
        "operationId": "TenantController_getTenantUsers",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users in the tenant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all users for a tenant",
        "tags": [
          "User Tenants"
        ]
      }
    },
    "/user-tenants/users/selected-tenant": {
      "post": {
        "operationId": "TenantController_updateSelectedTenant",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSelectedTenantDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Selected tenant updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update selected tenant for authenticated user",
        "tags": [
          "User Tenants"
        ]
      }
    },
    "/auth/users": {
      "post": {
        "operationId": "AuthController_ensureUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created or retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "summary": "Create or get user by Firebase ID",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/users/me": {
      "get": {
        "operationId": "AuthController_getCurrentUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current user details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "summary": "Get current authenticated user",
        "tags": [
          "Auth"
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "HealthController_check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Health"
        ]
      }
    }
  },
  "info": {
    "title": "Pricing Agent Builder API",
    "description": "API documentation for the Pricing Agent Builder service",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "pricing-agents",
      "description": ""
    },
    {
      "name": "builder",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "schemas": {
      "CreatePricingAgentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "TagEnum": {
        "type": "string",
        "enum": [
          "PRICING_TABLE_ADDED",
          "PRICING_TABLE_UPDATED",
          "CALCULATION_FORMULA_RULE_ADDED",
          "CALCULATION_FORMULA_RULE_UPDATED",
          "NEW_PROMOTION"
        ]
      },
      "HumanInputMessage": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagEnum"
            }
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "createdAt"
        ]
      },
      "PricingAgentCheckpoint": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid"
          },
          "pricingAgentId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string"
          },
          "version": {
            "type": "number"
          },
          "humanInputMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HumanInputMessage"
            }
          },
          "functionSchema": {
            "type": "string"
          },
          "functionCode": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          },
          "checkpointTrigger": {
            "type": "object"
          },
          "checkpointDescription": {
            "type": "string"
          }
        },
        "required": [
          "pricingAgentId",
          "version",
          "humanInputMessages",
          "createdAt",
          "checkpointTrigger"
        ]
      },
      "PricingAgentWithLatestCheckpoint": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid"
          },
          "latestCheckpoint": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PricingAgentCheckpoint"
              }
            ]
          },
          "tenantId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "createdAt"
        ]
      },
      "PricingAgent": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "createdAt"
        ]
      },
      "AddHumanInputMessageDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PRICING_TABLE_ADDED",
                "PRICING_TABLE_UPDATED",
                "CALCULATION_FORMULA_RULE_ADDED",
                "CALCULATION_FORMULA_RULE_UPDATED",
                "NEW_PROMOTION"
              ]
            }
          }
        }
      },
      "AssignmentResultDto": {
        "type": "object",
        "properties": {
          "agentId": {
            "type": "string"
          },
          "datasetId": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "assignedAt": {
            "format": "date-time",
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "agentId",
          "datasetId",
          "tenantId",
          "assignedAt",
          "message"
        ]
      },
      "HappyPathTestData": {
        "type": "object",
        "properties": {
          "orderInputNaturalLanguage": {
            "type": "string"
          },
          "expectedTotal": {
            "type": "number"
          },
          "expectedTotalReasoning": {
            "type": "string"
          }
        },
        "required": [
          "orderInputNaturalLanguage",
          "expectedTotal",
          "expectedTotalReasoning"
        ]
      },
      "DatasetHappyPathTestData": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid"
          },
          "testingDatasetId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/HappyPathTestData"
          }
        },
        "required": [
          "testingDatasetId",
          "data"
        ]
      },
      "UnhappyPathTestData": {
        "type": "object",
        "properties": {
          "orderInputNaturalLanguage": {
            "type": "string"
          },
          "expectedErrorType": {
            "type": "string",
            "enum": [
              "NOT_ENOUGH_DATA_TO_QUOTE",
              "INCORRECT_ORDER_PARAMETER_VALUE",
              "QUOTATION_RULE_VIOLATION"
            ]
          },
          "expectedErrorReasoning": {
            "type": "string"
          }
        },
        "required": [
          "orderInputNaturalLanguage",
          "expectedErrorType",
          "expectedErrorReasoning"
        ]
      },
      "DatasetUnhappyPathTestData": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid"
          },
          "testingDatasetId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/UnhappyPathTestData"
          }
        },
        "required": [
          "testingDatasetId",
          "data"
        ]
      },
      "TestingDatasetWithTestsDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          },
          "happyPathTests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetHappyPathTestData"
            }
          },
          "unhappyPathTests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetUnhappyPathTestData"
            }
          }
        },
        "required": [
          "name",
          "createdAt"
        ]
      },
      "ChatbotMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The message text"
          },
          "role": {
            "type": "string",
            "description": "The role of the message sender",
            "enum": [
              "AI",
              "User"
            ]
          }
        },
        "required": [
          "message",
          "role"
        ]
      },
      "PlaygroundExecutionRequestDto": {
        "type": "object",
        "properties": {
          "input": {
            "type": "string"
          },
          "conversation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatbotMessage"
            }
          }
        },
        "required": [
          "input"
        ]
      },
      "BacktraceCalculationStepDTO": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "subTasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BacktraceCalculationStepDTO"
            }
          }
        },
        "required": [
          "operation",
          "description"
        ]
      },
      "QuoteErrorDTO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "QuoteResultDTO": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number"
          },
          "pricingCalculationBacktrace": {
            "$ref": "#/components/schemas/BacktraceCalculationStepDTO"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuoteErrorDTO"
            }
          }
        }
      },
      "PlaygroundExecutionResponseDto": {
        "type": "object",
        "properties": {
          "structuredOrder": {
            "type": "object",
            "description": "The structured order input converted from natural language"
          },
          "functionResult": {
            "description": "The result from executing the pricing function",
            "allOf": [
              {
                "$ref": "#/components/schemas/QuoteResultDTO"
              }
            ]
          },
          "aiMessage": {
            "type": "string",
            "description": "The AI-generated response message for the playground conversation"
          }
        },
        "required": [
          "structuredOrder",
          "functionResult",
          "aiMessage"
        ]
      },
      "DemoConversationResponseDto": {
        "type": "object",
        "properties": {
          "conversationHistory": {
            "description": "Conversation history with previous messages",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatbotMessage"
            }
          },
          "nextUserMessage": {
            "type": "string",
            "description": "The next user message for order confirmation"
          }
        },
        "required": [
          "nextUserMessage"
        ]
      },
      "TestingDataset": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "createdAt"
        ]
      },
      "CreateTestingDatasetDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "happyPathTests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetHappyPathTestData"
            }
          },
          "unhappyPathTests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetUnhappyPathTestData"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "TestResultDTO": {
        "type": "object",
        "properties": {
          "passed": {
            "type": "boolean"
          },
          "functionResult": {
            "$ref": "#/components/schemas/QuoteResultDTO"
          },
          "runnerException": {
            "type": "object"
          }
        },
        "required": [
          "passed"
        ]
      },
      "CheckpointHappyPathTestWithData": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid"
          },
          "checkpointId": {
            "type": "string",
            "format": "uuid"
          },
          "datasetId": {
            "type": "string",
            "format": "uuid"
          },
          "datasetTestId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "functionInputParams": {
            "type": "object"
          },
          "testRunResult": {
            "$ref": "#/components/schemas/TestResultDTO"
          },
          "testData": {
            "$ref": "#/components/schemas/HappyPathTestData"
          }
        },
        "required": [
          "checkpointId",
          "datasetId",
          "datasetTestId",
          "createdAt",
          "functionInputParams",
          "testData"
        ]
      },
      "CheckpointUnhappyPathTestWithData": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid"
          },
          "checkpointId": {
            "type": "string",
            "format": "uuid"
          },
          "datasetId": {
            "type": "string",
            "format": "uuid"
          },
          "datasetTestId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "functionInputParams": {
            "type": "object"
          },
          "testRunResult": {
            "$ref": "#/components/schemas/TestResultDTO"
          },
          "testData": {
            "$ref": "#/components/schemas/UnhappyPathTestData"
          }
        },
        "required": [
          "checkpointId",
          "datasetId",
          "datasetTestId",
          "createdAt",
          "functionInputParams",
          "testData"
        ]
      },
      "CheckpointTestsetDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid"
          },
          "checkpointId": {
            "type": "string",
            "format": "uuid"
          },
          "happyPathTests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckpointHappyPathTestWithData"
            }
          },
          "unhappyPathTests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckpointUnhappyPathTestWithData"
            }
          }
        },
        "required": [
          "checkpointId"
        ]
      },
      "PricingTableExtractionRequest": {
        "type": "object",
        "properties": {
          "imageData": {
            "type": "string"
          },
          "imageMimeType": {
            "type": "string"
          },
          "additionalContext": {
            "type": "string"
          }
        },
        "required": [
          "imageData",
          "imageMimeType"
        ]
      },
      "ExtractedPricingTable": {
        "type": "object",
        "properties": {
          "markdown": {
            "type": "string"
          },
          "rawText": {
            "type": "string"
          },
          "confidence": {
            "type": "number"
          }
        },
        "required": [
          "markdown",
          "rawText",
          "confidence"
        ]
      },
      "CreateTenantDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ]
      },
      "TenantDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "isActive",
          "createdAt"
        ]
      },
      "LLMConfigurationDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "openai",
              "anthropic",
              "google",
              "azure-openai"
            ]
          },
          "model": {
            "type": "string"
          },
          "apiKey": {
            "type": "string"
          },
          "baseUrl": {
            "type": "string"
          },
          "additionalConfig": {
            "type": "object"
          },
          "useByok": {
            "type": "boolean"
          }
        },
        "required": [
          "provider",
          "model",
          "apiKey",
          "useByok"
        ]
      },
      "UpdateTenantDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "builderLlmConfiguration": {
            "$ref": "#/components/schemas/LLMConfigurationDto"
          }
        }
      },
      "SuccessResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        },
        "required": [
          "success"
        ]
      },
      "AssignUserToTenantDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "object"
          }
        }
      },
      "UserTenantDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "tenantId": {
            "type": "string",
            "format": "uuid"
          },
          "role": {
            "type": "string",
            "enum": [
              "admin",
              "member"
            ],
            "default": "member"
          },
          "assignedAt": {
            "format": "date-time",
            "type": "string"
          },
          "removedAt": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "userId",
          "tenantId",
          "role",
          "assignedAt"
        ]
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid"
          },
          "firebaseId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "selectedTenantId": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "deletedAt": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "firebaseId",
          "email",
          "isActive",
          "createdAt"
        ]
      },
      "UpdateSelectedTenantDto": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string"
          }
        },
        "required": [
          "tenantId"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "firebaseId": {
            "type": "string",
            "description": "Firebase user ID"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email"
          },
          "role": {
            "type": "string",
            "description": "User role",
            "default": "admin"
          }
        },
        "required": [
          "firebaseId",
          "email"
        ]
      }
    }
  }
}