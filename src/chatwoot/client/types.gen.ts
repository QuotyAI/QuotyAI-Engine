// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'https://app.chatwoot.com/' | (string & {});
};

/**
 * data
 */
export type BadRequestError = {
    description?: string;
    errors?: Array<RequestError>;
};

export type RequestError = {
    field?: string;
    message?: string;
    code?: string;
};

export type GenericId = {
    id?: number;
};

export type CannedResponse = {
    /**
     * ID of the canned response
     */
    id?: number;
    /**
     * Account Id
     */
    account_id?: number;
    /**
     * Short Code for quick access of the canned response
     */
    short_code?: string;
    /**
     * Message content for canned response
     */
    content?: string;
    /**
     * The date and time when the canned response was created
     */
    created_at?: string;
    /**
     * The date and time when the canned response was updated
     */
    updated_at?: string;
};

export type CustomAttribute = {
    /**
     * Identifier
     */
    id?: number;
    /**
     * Attribute display name
     */
    attribute_display_name?: string;
    /**
     * Attribute display type (text, number, currency, percent, link, date, list, checkbox)
     */
    attribute_display_type?: string;
    /**
     * Attribute description
     */
    attribute_description?: string;
    /**
     * Attribute unique key value
     */
    attribute_key?: string;
    /**
     * Regex pattern
     */
    regex_pattern?: string;
    /**
     * Regex cue
     */
    regex_cue?: string;
    /**
     * Attribute values
     */
    attribute_values?: string;
    /**
     * Attribute type(conversation_attribute/contact_attribute)
     */
    attribute_model?: string;
    /**
     * Attribute default value
     */
    default_value?: string;
    /**
     * The date and time when the custom attribute was created
     */
    created_at?: string;
    /**
     * The date and time when the custom attribute was updated
     */
    updated_at?: string;
};

export type AutomationRule = {
    /**
     * Response payload that contains automation rule(s)
     */
    payload?: Array<AutomationRuleItem> | AutomationRuleItem;
};

export type AutomationRuleItem = {
    /**
     * The ID of the automation rule
     */
    id?: number;
    /**
     * Account Id
     */
    account_id?: number;
    /**
     * The name of the rule
     */
    name?: string;
    /**
     * Description to give more context about the rule
     */
    description?: string;
    /**
     * Automation Rule event, on which we call the actions(conversation_created, conversation_updated, message_created)
     */
    event_name?: 'conversation_created' | 'conversation_updated' | 'message_created';
    /**
     * Array of conditions on which conversation/message filter would work
     */
    conditions?: Array<{
        values?: Array<string>;
        attribute_key?: string;
        query_operator?: string;
        filter_operator?: string;
    }>;
    /**
     * Array of actions which we perform when condition matches
     */
    actions?: Array<{
        action_name?: string;
        action_params?: Array<string>;
    }>;
    /**
     * The timestamp when the rule was created
     */
    created_on?: number;
    /**
     * Enable/disable automation rule
     */
    active?: boolean;
};

export type Portal = {
    payload?: Array<PortalItem>;
};

export type PortalSingle = {
    payload?: PortalItem;
};

/**
 * Configuration settings for the portal
 */
export type PortalConfig = {
    /**
     * List of allowed locales for the portal
     */
    allowed_locales?: Array<{
        /**
         * The language code
         */
        code?: string;
        /**
         * Number of articles in this locale
         */
        articles_count?: number;
        /**
         * Number of categories in this locale
         */
        categories_count?: number;
    }>;
};

export type PortalLogo = {
    /**
     * ID of the logo file
     */
    id?: number;
    /**
     * ID of the portal this logo belongs to
     */
    portal_id?: number;
    /**
     * MIME type of the file
     */
    file_type?: string;
    /**
     * ID of the account
     */
    account_id?: number;
    /**
     * URL to access the logo file
     */
    file_url?: string;
    /**
     * ID of the blob
     */
    blob_id?: number;
    /**
     * Name of the file
     */
    filename?: string;
};

export type PortalMeta = {
    /**
     * Total number of articles
     */
    all_articles_count?: number;
    /**
     * Number of archived articles
     */
    archived_articles_count?: number | null;
    /**
     * Number of published articles
     */
    published_count?: number | null;
    /**
     * Number of draft articles
     */
    draft_articles_count?: number | null;
    /**
     * Number of categories
     */
    categories_count?: number;
    /**
     * Default locale for the portal
     */
    default_locale?: string;
};

export type PortalItem = {
    /**
     * The ID of the portal
     */
    id?: number;
    /**
     * Whether the portal is archived
     */
    archived?: boolean;
    /**
     * The color code for the portal
     */
    color?: string;
    config?: PortalConfig;
    /**
     * Custom domain for the portal
     */
    custom_domain?: string;
    /**
     * The header text for the portal
     */
    header_text?: string;
    /**
     * Homepage link for the portal
     */
    homepage_link?: string;
    /**
     * Name of the portal
     */
    name?: string;
    /**
     * URL slug for the portal
     */
    slug?: string;
    /**
     * Page title for the portal
     */
    page_title?: string;
    /**
     * ID of the account the portal belongs to
     */
    account_id?: number;
    inbox?: Inbox;
    logo?: PortalLogo;
    meta?: PortalMeta;
};

export type Category = {
    id?: number;
    /**
     * The text content.
     */
    description?: string;
    locale?: string;
    name?: string;
    slug?: string;
    position?: number;
    portal_id?: number;
    account_id?: number;
    /**
     * To associate similar categories to each other, e.g same category of product documentation in different languages
     */
    associated_category_id?: number;
    /**
     * To define parent category, e.g product documentation has multiple level features in sales category or in engineering category.
     */
    parent_category_id?: number;
};

export type Article = {
    id?: number;
    /**
     * The text content.
     */
    content?: string;
    meta?: {
        [key: string]: unknown;
    };
    position?: number;
    status?: 'draft' | 'published' | 'archived';
    title?: string;
    slug?: string;
    views?: number;
    portal_id?: number;
    account_id?: number;
    author_id?: number;
    category_id?: number;
    folder_id?: number;
    /**
     * To associate similar articles to each other, e.g to provide the link for the reference.
     */
    associated_article_id?: number;
};

export type Contact = {
    payload?: Array<{
        /**
         * The object containing additional attributes related to the contact
         */
        additional_attributes?: {
            [key: string]: unknown;
        };
        /**
         * The availability status of the contact
         */
        availability_status?: string;
        /**
         * The email address of the contact
         */
        email?: string;
        /**
         * The ID of the contact
         */
        id?: number;
        /**
         * The name of the contact
         */
        name?: string;
        /**
         * The phone number of the contact
         */
        phone_number?: string;
        /**
         * Whether the contact is blocked
         */
        blocked?: boolean;
        /**
         * The identifier of the contact
         */
        identifier?: string;
        /**
         * The thumbnail of the contact
         */
        thumbnail?: string;
        /**
         * The custom attributes of the contact
         */
        custom_attributes?: {
            [key: string]: unknown;
        };
        /**
         * The last activity at of the contact
         */
        last_activity_at?: number;
        /**
         * The created at of the contact
         */
        created_at?: number;
        contact_inboxes?: Array<ContactInboxes>;
    }>;
};

export type Conversation = {
    /**
     * ID of the conversation
     */
    id?: number;
    messages?: Array<Message>;
    /**
     * Account Id
     */
    account_id?: number;
    /**
     * UUID of the conversation
     */
    uuid?: string;
    /**
     * The object containing additional attributes related to the conversation
     */
    additional_attributes?: {
        [key: string]: unknown;
    };
    /**
     * The last activity at of the agent
     */
    agent_last_seen_at?: number;
    /**
     * The last activity at of the assignee
     */
    assignee_last_seen_at?: number;
    /**
     * Whether the conversation can be replied to
     */
    can_reply?: boolean;
    /**
     * The last activity at of the contact
     */
    contact_last_seen_at?: number;
    /**
     * The object to save custom attributes for conversation, accepts custom attributes key and value
     */
    custom_attributes?: {
        [key: string]: unknown;
    };
    /**
     * ID of the inbox
     */
    inbox_id?: number;
    /**
     * The labels of the conversation
     */
    labels?: Array<string>;
    /**
     * Whether the conversation is muted
     */
    muted?: boolean;
    /**
     * The time at which the conversation will be unmuted
     */
    snoozed_until?: number;
    /**
     * The status of the conversation
     */
    status?: 'open' | 'resolved' | 'pending';
    /**
     * The time at which conversation was created
     */
    created_at?: number;
    /**
     * The time at which conversation was updated
     */
    updated_at?: number;
    /**
     * The time at which conversation was created
     */
    timestamp?: string;
    /**
     * The time at which the first reply was created
     */
    first_reply_created_at?: number;
    /**
     * The number of unread messages
     */
    unread_count?: number;
    last_non_activity_message?: Message;
    /**
     * The last activity at of the conversation
     */
    last_activity_at?: number;
    /**
     * The priority of the conversation
     */
    priority?: string;
    /**
     * The time at which the conversation was waiting
     */
    waiting_since?: number;
    /**
     * The ID of the SLA policy
     */
    sla_policy_id?: number;
    /**
     * The applied SLA
     */
    applied_sla?: {
        [key: string]: unknown;
    };
    sla_events?: Array<{
        [key: string]: unknown;
    }>;
};

export type Message = {
    /**
     * The ID of the message
     */
    id?: number;
    /**
     * The text content of the message
     */
    content?: string;
    /**
     * The ID of the account
     */
    account_id?: number;
    /**
     * The ID of the inbox
     */
    inbox_id?: number;
    /**
     * The ID of the conversation
     */
    conversation_id?: number;
    /**
     * The type of the message
     */
    message_type?: 0 | 1 | 2;
    /**
     * The time at which message was created
     */
    created_at?: number;
    /**
     * The time at which message was updated
     */
    updated_at?: number;
    /**
     * The flags which shows whether the message is private or not
     */
    private?: boolean;
    /**
     * The status of the message
     */
    status?: 'sent' | 'delivered' | 'read' | 'failed';
    /**
     * The source ID of the message
     */
    source_id?: string;
    /**
     * The type of the template message
     */
    content_type?: 'text' | 'input_select' | 'cards' | 'form';
    /**
     * The content attributes for each content_type
     */
    content_attributes?: {
        [key: string]: unknown;
    };
    /**
     * The type of the sender
     */
    sender_type?: 'contact' | 'agent' | 'agent_bot';
    /**
     * The ID of the sender
     */
    sender_id?: number;
    /**
     * The external source IDs of the message
     */
    external_source_ids?: {
        [key: string]: unknown;
    };
    /**
     * The additional attributes of the message
     */
    additional_attributes?: {
        [key: string]: unknown;
    };
    /**
     * The processed message content
     */
    processed_message_content?: string;
    /**
     * The sentiment of the message
     */
    sentiment?: {
        [key: string]: unknown;
    };
    /**
     * The conversation object
     */
    conversation?: {
        [key: string]: unknown;
    };
    /**
     * The file object attached to the image
     */
    attachment?: {
        [key: string]: unknown;
    };
    /**
     * User/Agent/AgentBot object
     */
    sender?: {
        [key: string]: unknown;
    };
};

export type User = {
    id?: number;
    access_token?: string;
    account_id?: number;
    available_name?: string;
    avatar_url?: string;
    confirmed?: boolean;
    display_name?: string | null;
    message_signature?: string | null;
    email?: string;
    hmac_identifier?: string;
    inviter_id?: number;
    name?: string;
    provider?: string;
    pubsub_token?: string;
    role?: 'agent' | 'administrator';
    ui_settings?: {
        [key: string]: unknown;
    };
    uid?: string;
    type?: string | null;
    /**
     * Available for users who are created through platform APIs and has custom attributes associated.
     */
    custom_attributes?: {
        [key: string]: unknown;
    };
    accounts?: Array<{
        id?: number;
        name?: string;
        status?: string;
        active_at?: string;
        role?: 'administrator' | 'agent';
        permissions?: Array<string>;
        availability?: string;
        availability_status?: string;
        auto_offline?: boolean;
        custom_role_id?: number | null;
        custom_role?: {
            [key: string]: unknown;
        } | null;
    }>;
};

export type Agent = {
    id?: number;
    account_id?: number;
    /**
     * The availability status of the agent computed by Chatwoot.
     */
    availability_status?: 'available' | 'busy' | 'offline';
    /**
     * Whether the availability status of agent is configured to go offline automatically when away.
     */
    auto_offline?: boolean;
    /**
     * Whether the agent has confirmed their email address.
     */
    confirmed?: boolean;
    /**
     * The email of the agent
     */
    email?: string;
    /**
     * The available name of the agent
     */
    available_name?: string;
    /**
     * The name of the agent
     */
    name?: string;
    /**
     * The role of the agent
     */
    role?: 'agent' | 'administrator';
    /**
     * The thumbnail of the agent
     */
    thumbnail?: string;
    /**
     * The custom role id of the agent
     */
    custom_role_id?: number;
};

export type Inbox = {
    /**
     * ID of the inbox
     */
    id?: number;
    /**
     * The name of the inbox
     */
    name?: string;
    /**
     * Website URL
     */
    website_url?: string;
    /**
     * The type of the inbox
     */
    channel_type?: string;
    /**
     * The avatar image of the inbox
     */
    avatar_url?: string;
    /**
     * Widget Color used for customization of the widget
     */
    widget_color?: string;
    /**
     * Website Token
     */
    website_token?: string;
    /**
     * The flag which shows whether Auto Assignment is enabled or not
     */
    enable_auto_assignment?: boolean;
    /**
     * Script used to load the website widget
     */
    web_widget_script?: string;
    /**
     * Welcome title to be displayed on the widget
     */
    welcome_title?: string;
    /**
     * Welcome tagline to be displayed on the widget
     */
    welcome_tagline?: string;
    /**
     * The flag which shows whether greeting is enabled
     */
    greeting_enabled?: boolean;
    /**
     * A greeting message when the user starts the conversation
     */
    greeting_message?: string;
    /**
     * ID of the channel this inbox belongs to
     */
    channel_id?: number;
    /**
     * The flag which shows whether working hours feature is enabled
     */
    working_hours_enabled?: boolean;
    /**
     * The flag to enable collecting email from contacts
     */
    enable_email_collect?: boolean;
    /**
     * The flag to enable CSAT survey
     */
    csat_survey_enabled?: boolean;
    /**
     * Configuration settings for auto assignment
     */
    auto_assignment_config?: {
        [key: string]: unknown;
    };
    /**
     * Message to show when agents are out of office
     */
    out_of_office_message?: string;
    /**
     * Configuration for working hours of the inbox
     */
    working_hours?: Array<{
        /**
         * Day of the week (0-6, where 0 is Sunday)
         */
        day_of_week?: number;
        /**
         * Whether the inbox is closed for the entire day
         */
        closed_all_day?: boolean;
        /**
         * Hour when inbox opens (0-23)
         */
        open_hour?: number;
        /**
         * Minutes of the hour when inbox opens (0-59)
         */
        open_minutes?: number;
        /**
         * Hour when inbox closes (0-23)
         */
        close_hour?: number;
        /**
         * Minutes of the hour when inbox closes (0-59)
         */
        close_minutes?: number;
        /**
         * Whether the inbox is open for the entire day
         */
        open_all_day?: boolean;
    }>;
    /**
     * Timezone configuration for the inbox
     */
    timezone?: string;
    /**
     * Webhook URL for callbacks
     */
    callback_webhook_url?: string;
    /**
     * Whether to allow messages after a conversation is resolved
     */
    allow_messages_after_resolved?: boolean;
    /**
     * Whether to lock a contact to a single conversation
     */
    lock_to_single_conversation?: boolean;
    /**
     * Type of sender name to display (e.g., friendly)
     */
    sender_name_type?: string;
    /**
     * Business name associated with the inbox
     */
    business_name?: string;
    /**
     * Whether HMAC verification is mandatory
     */
    hmac_mandatory?: boolean;
    /**
     * Selected feature flags for the inbox
     */
    selected_feature_flags?: {
        [key: string]: unknown;
    };
    /**
     * Expected reply time
     */
    reply_time?: string;
    /**
     * Messaging service SID for SMS providers
     */
    messaging_service_sid?: string;
    /**
     * Phone number associated with the inbox
     */
    phone_number?: string;
    /**
     * Medium of communication (e.g., sms, email)
     */
    medium?: string;
    /**
     * Provider of the channel
     */
    provider?: string;
};

export type InboxContact = {
    /**
     * ID of the inbox
     */
    id?: number;
    /**
     * The avatar image of the inbox
     */
    avatar_url?: string;
    /**
     * The ID of the channel
     */
    channel_id?: number;
    /**
     * The name of the inbox
     */
    name?: string;
    /**
     * The type of the inbox
     */
    channel_type?: string;
    /**
     * The provider of the inbox
     */
    provider?: string;
};

export type AgentBot = {
    /**
     * ID of the agent bot
     */
    id?: number;
    /**
     * The name of the agent bot
     */
    name?: string;
    /**
     * The description about the agent bot
     */
    description?: string;
    /**
     * The thumbnail of the agent bot
     */
    thumbnail?: string;
    /**
     * The webhook URL for the bot
     */
    outgoing_url?: string;
    /**
     * The type of the bot
     */
    bot_type?: string;
    /**
     * The configuration of the bot
     */
    bot_config?: {
        [key: string]: unknown;
    };
    /**
     * Account ID if it's an account specific bot
     */
    account_id?: number;
    /**
     * The access token for the bot
     */
    access_token?: string;
    /**
     * Whether the bot is a system bot
     */
    system_bot?: boolean;
};

export type ContactInboxes = {
    /**
     * Contact Inbox Source Id
     */
    source_id?: string;
    inbox?: InboxContact;
};

export type ContactableInboxes = {
    /**
     * Contact Inbox Source Id
     */
    source_id?: string;
    inbox?: Inbox;
};

export type CustomFilter = {
    /**
     * The ID of the custom filter
     */
    id?: number;
    /**
     * The name of the custom filter
     */
    name?: string;
    /**
     * The description about the custom filter
     */
    type?: 'conversation' | 'contact' | 'report';
    /**
     * A query that needs to be saved as a custom filter
     */
    query?: {
        [key: string]: unknown;
    };
    /**
     * The time at which the custom filter was created
     */
    created_at?: string;
    /**
     * The time at which the custom filter was updated
     */
    updated_at?: string;
};

export type Webhook = {
    /**
     * The ID of the webhook
     */
    id?: number;
    /**
     * The url to which the events will be send
     */
    url?: string;
    /**
     * The list of subscribed events
     */
    subscriptions?: Array<'conversation_created' | 'conversation_status_changed' | 'conversation_updated' | 'contact_created' | 'contact_updated' | 'message_created' | 'message_updated' | 'webwidget_triggered'>;
    /**
     * The id of the account which the webhook object belongs to
     */
    account_id?: number;
};

export type Account = {
    /**
     * Account ID
     */
    id?: number;
    /**
     * Name of the account
     */
    name?: string;
    /**
     * The user role in the account
     */
    role?: 'administrator' | 'agent';
};

export type AccountDetail = {
    /**
     * Account ID
     */
    id?: number;
    /**
     * Name of the account
     */
    name?: string;
    /**
     * The locale of the account
     */
    locale?: string;
    /**
     * The domain of the account
     */
    domain?: string;
    /**
     * The support email of the account
     */
    support_email?: string;
    /**
     * The status of the account
     */
    status?: string;
    /**
     * The creation date of the account
     */
    created_at?: string;
    /**
     * Cache keys for the account
     */
    cache_keys?: {
        [key: string]: unknown;
    };
    /**
     * Enabled features for the account
     */
    features?: Array<string>;
    /**
     * Account settings
     */
    settings?: {
        /**
         * Auto resolve conversations after specified minutes
         */
        auto_resolve_after?: number;
        /**
         * Message to send when auto resolving
         */
        auto_resolve_message?: string;
        /**
         * Whether to ignore waiting conversations for auto resolve
         */
        auto_resolve_ignore_waiting?: boolean;
    };
    /**
     * Custom attributes of the account
     */
    custom_attributes?: {
        /**
         * Subscription plan name
         */
        plan_name?: string;
        /**
         * Subscribed quantity
         */
        subscribed_quantity?: number;
        /**
         * Subscription status
         */
        subscription_status?: string;
        /**
         * Subscription end date
         */
        subscription_ends_on?: string;
        /**
         * Industry type
         */
        industry?: string;
        /**
         * Company size
         */
        company_size?: string;
        /**
         * Account timezone
         */
        timezone?: string;
        /**
         * Account logo URL
         */
        logo?: string;
        /**
         * Current onboarding step
         */
        onboarding_step?: string;
        /**
         * When account was marked for deletion
         */
        marked_for_deletion_at?: string;
        /**
         * Reason for account deletion
         */
        marked_for_deletion_reason?: string;
    };
};

export type AccountShowResponse = AccountDetail & {
    /**
     * Latest version of Chatwoot available
     */
    latest_chatwoot_version?: string;
    /**
     * List of subscribed enterprise features (if enterprise edition is enabled)
     */
    subscribed_features?: Array<string>;
};

/**
 * Array of account users
 */
export type AccountUser = Array<{
    /**
     * The ID of the account
     */
    account_id?: number;
    /**
     * The ID of the user
     */
    user_id?: number;
    /**
     * whether user is an administrator or agent
     */
    role?: string;
}>;

export type PlatformAccount = {
    /**
     * Account ID
     */
    id?: number;
    /**
     * Name of the account
     */
    name?: string;
};

export type Team = {
    /**
     * The ID of the team
     */
    id?: number;
    /**
     * The name of the team
     */
    name?: string;
    /**
     * The description about the team
     */
    description?: string;
    /**
     * If this setting is turned on, the system would automatically assign the conversation to an agent in the team while assigning the conversation to a team
     */
    allow_auto_assign?: boolean;
    /**
     * The ID of the account with the team is a part of
     */
    account_id?: number;
    /**
     * This field shows whether the current user is a part of the team
     */
    is_member?: boolean;
};

export type IntegrationsApp = {
    /**
     * The ID of the integration
     */
    id?: string;
    /**
     * The name of the integration
     */
    name?: string;
    /**
     * The description about the team
     */
    description?: string;
    /**
     * Whether the integration is an account or inbox integration
     */
    hook_type?: string;
    /**
     * Whether the integration is enabled for the account
     */
    enabled?: boolean;
    /**
     * Whether multiple hooks can be created for the integration
     */
    allow_multiple_hooks?: boolean;
    /**
     * If there are any hooks created for this integration
     */
    hooks?: Array<{
        [key: string]: unknown;
    }>;
};

export type IntegrationsHook = {
    /**
     * The ID of the integration hook
     */
    id?: string;
    /**
     * The ID of the integration app
     */
    app_id?: string;
    /**
     * Inbox ID if its an Inbox integration
     */
    inbox_id?: string;
    /**
     * Account ID of the integration
     */
    account_id?: string;
    /**
     * Whether the integration hook is enabled for the account
     */
    status?: boolean;
    /**
     * Whether its an account or inbox integration hook
     */
    hook_type?: boolean;
    /**
     * The associated settings for the integration
     */
    settings?: {
        [key: string]: unknown;
    };
};

export type AuditLog = {
    /**
     * Unique identifier for the audit log entry
     */
    id?: number;
    /**
     * The ID of the audited object
     */
    auditable_id?: number;
    /**
     * The type of the audited object (e.g., Conversation, Contact, User)
     */
    auditable_type?: string;
    /**
     * The audited object data
     */
    auditable?: {
        [key: string]: unknown;
    };
    /**
     * The ID of the associated object (typically the account ID)
     */
    associated_id?: number;
    /**
     * The type of the associated object
     */
    associated_type?: string;
    /**
     * The ID of the user who performed the action
     */
    user_id?: number;
    /**
     * The type of user who performed the action
     */
    user_type?: string;
    /**
     * The email/username of the user who performed the action
     */
    username?: string;
    /**
     * The action performed on the object
     */
    action?: 'create' | 'update' | 'destroy';
    /**
     * JSON object containing the changes made to the audited object
     */
    audited_changes?: {
        [key: string]: unknown;
    };
    /**
     * Version number of the audit log entry
     */
    version?: number;
    /**
     * Optional comment associated with the audit log entry
     */
    comment?: string | null;
    /**
     * UUID to identify the request that generated this audit log
     */
    request_uuid?: string;
    /**
     * Unix timestamp when the audit log entry was created
     */
    created_at?: number;
    /**
     * IP address from which the action was performed
     */
    remote_address?: string | null;
};

export type PublicContact = {
    /**
     * Id of the contact
     */
    id?: number;
    /**
     * The session identifier of the contact
     */
    source_id?: string;
    /**
     * Name of the contact
     */
    name?: string;
    /**
     * Email of the contact
     */
    email?: string;
    /**
     * The token to be used to connect to chatwoot websocket
     */
    pubsub_token?: string;
};

export type PublicConversation = {
    /**
     * Id of the conversation
     */
    id?: number;
    /**
     * The inbox id of the conversation
     */
    inbox_id?: string;
    /**
     * Messages in the conversation
     */
    messages?: Array<Message>;
    /**
     * The contact information associated to the conversation
     */
    contact?: {
        [key: string]: unknown;
    };
};

export type PublicMessage = {
    /**
     * Id of the message
     */
    id?: string;
    /**
     * Text content of the message
     */
    content?: string;
    /**
     * Denotes the message type
     */
    message_type?: string;
    /**
     * Content type of the message
     */
    content_type?: string;
    /**
     * Additional content attributes of the message
     */
    content_attributes?: string;
    /**
     * Created at time stamp of the message
     */
    created_at?: string;
    /**
     * Conversation Id of the message
     */
    conversation_id?: string;
    /**
     * Attachments if any
     */
    attachments?: Array<{
        [key: string]: unknown;
    }>;
    /**
     * Details of the sender
     */
    sender?: {
        [key: string]: unknown;
    };
};

export type PublicInbox = {
    /**
     * Inbox identifier
     */
    identifier?: string;
    /**
     * Name of the inbox
     */
    name?: string;
    /**
     * The timezone defined on the inbox
     */
    timezone?: string;
    /**
     * The working hours defined on the inbox
     */
    working_hours?: Array<{
        /**
         * Day of the week as a number. Sunday -> 0, Saturday -> 6
         */
        day_of_week?: number;
        /**
         * Whether or not the business is open the whole day
         */
        open_all_day?: boolean;
        /**
         * Whether or not the business is closed the whole day
         */
        closed_all_day?: boolean;
        /**
         * Opening hour. Can be null if closed all day
         */
        open_hour?: number;
        /**
         * Opening minute. Can be null if closed all day
         */
        open_minutes?: number;
        /**
         * Closing hour. Can be null if closed all day
         */
        close_hour?: number;
        /**
         * Closing minute. Can be null if closed all day
         */
        close_minutes?: number;
    }>;
    /**
     * Whether of not the working hours are enabled on the inbox
     */
    working_hours_enabled?: boolean;
    /**
     * Whether of not the Customer Satisfaction survey is enabled on the inbox
     */
    csat_survey_enabled?: boolean;
    /**
     * Whether of not the Greeting Message is enabled on the inbox
     */
    greeting_enabled?: boolean;
    /**
     * Whether of not the User Identity Validation is enforced on the inbox
     */
    identity_validation_enabled?: boolean;
};

export type AccountCreateUpdatePayload = {
    /**
     * Name of the account
     */
    name?: string;
    /**
     * The locale of the account
     */
    locale?: string;
    /**
     * The domain of the account
     */
    domain?: string;
    /**
     * The support email of the account
     */
    support_email?: string;
    /**
     * The status of the account
     */
    status?: 'active' | 'suspended';
    /**
     * The limits of the account
     */
    limits?: {
        [key: string]: unknown;
    };
    /**
     * The custom attributes of the account
     */
    custom_attributes?: {
        [key: string]: unknown;
    };
};

export type AccountUpdatePayload = {
    /**
     * Name of the account
     */
    name?: string;
    /**
     * The locale of the account
     */
    locale?: string;
    /**
     * The domain of the account
     */
    domain?: string;
    /**
     * The support email of the account
     */
    support_email?: string;
    /**
     * Auto resolve conversations after specified minutes
     */
    auto_resolve_after?: number | null;
    /**
     * Message to send when auto resolving
     */
    auto_resolve_message?: string | null;
    /**
     * Whether to ignore waiting conversations for auto resolve
     */
    auto_resolve_ignore_waiting?: boolean | null;
    /**
     * Industry type
     */
    industry?: string;
    /**
     * Company size
     */
    company_size?: string;
    /**
     * Account timezone
     */
    timezone?: string;
};

export type AccountUserCreateUpdatePayload = {
    /**
     * The ID of the user
     */
    user_id: number;
    /**
     * whether user is an administrator or agent
     */
    role: string;
};

export type PlatformAgentBotCreateUpdatePayload = {
    /**
     * The name of the agent bot
     */
    name?: string;
    /**
     * The description of the agent bot
     */
    description?: string;
    /**
     * The webhook URL for the bot
     */
    outgoing_url?: string;
    /**
     * The account ID to associate the agent bot with
     */
    account_id?: number;
    /**
     * Send the form data with the avatar image binary or use the avatar_url
     */
    avatar?: Blob | File;
    /**
     * The url to a jpeg, png file for the agent bot avatar
     */
    avatar_url?: string;
};

export type AgentBotCreateUpdatePayload = {
    /**
     * The name of the agent bot
     */
    name?: string;
    /**
     * The description of the agent bot
     */
    description?: string;
    /**
     * The webhook URL for the bot
     */
    outgoing_url?: string;
    /**
     * Send the form data with the avatar image binary or use the avatar_url
     */
    avatar?: Blob | File;
    /**
     * The url to a jpeg, png file for the agent bot avatar
     */
    avatar_url?: string;
    /**
     * The type of the bot (0 for webhook)
     */
    bot_type?: number;
    /**
     * The configuration for the bot
     */
    bot_config?: {
        [key: string]: unknown;
    };
};

export type UserCreateUpdatePayload = {
    /**
     * Name of the user
     */
    name?: string;
    /**
     * Display name of the user
     */
    display_name?: string;
    /**
     * Email of the user
     */
    email?: string;
    /**
     * Password must contain uppercase, lowercase letters, number and a special character
     */
    password?: string;
    /**
     * Custom attributes you want to associate with the user
     */
    custom_attributes?: {
        [key: string]: unknown;
    };
};

export type CannedResponseCreateUpdatePayload = {
    /**
     * Message content for canned response
     */
    content?: string;
    /**
     * Short Code for quick access of the canned response
     */
    short_code?: string;
};

export type CustomAttributeCreateUpdatePayload = {
    /**
     * Attribute display name
     */
    attribute_display_name?: string;
    /**
     * Attribute display type (text- 0, number- 1, currency- 2, percent- 3, link- 4, date- 5, list- 6, checkbox- 7)
     */
    attribute_display_type?: number;
    /**
     * Attribute description
     */
    attribute_description?: string;
    /**
     * Attribute unique key value
     */
    attribute_key?: string;
    /**
     * Attribute values
     */
    attribute_values?: Array<string>;
    /**
     * Attribute type(conversation_attribute- 0, contact_attribute- 1)
     */
    attribute_model?: number;
    /**
     * Regex pattern (Only applicable for type- text). The regex pattern is used to validate the attribute value(s).
     */
    regex_pattern?: string;
    /**
     * Regex cue message (Only applicable for type- text). The cue message is shown when the regex pattern is not matched.
     */
    regex_cue?: string;
};

export type AgentCreatePayload = {
    /**
     * Full Name of the agent
     */
    name: string;
    /**
     * Email of the Agent
     */
    email: string;
    /**
     * Whether its administrator or agent
     */
    role: 'agent' | 'administrator';
    /**
     * The availability setting of the agent.
     */
    availability_status?: 'available' | 'busy' | 'offline';
    /**
     * Whether the availability status of agent is configured to go offline automatically when away.
     */
    auto_offline?: boolean;
};

export type AgentUpdatePayload = {
    /**
     * Whether its administrator or agent
     */
    role: 'agent' | 'administrator';
    /**
     * The availability status of the agent.
     */
    availability_status?: 'available' | 'busy' | 'offline';
    /**
     * Whether the availability status of agent is configured to go offline automatically when away.
     */
    auto_offline?: boolean;
};

export type ContactCreatePayload = {
    /**
     * ID of the inbox to which the contact belongs
     */
    inbox_id: number;
    /**
     * name of the contact
     */
    name?: string;
    /**
     * email of the contact
     */
    email?: string;
    /**
     * whether the contact is blocked or not
     */
    blocked?: boolean;
    /**
     * phone number of the contact
     */
    phone_number?: string;
    /**
     * Send the form data with the avatar image binary or use the avatar_url
     */
    avatar?: Blob | File;
    /**
     * The url to a jpeg, png file for the contact avatar
     */
    avatar_url?: string;
    /**
     * A unique identifier for the contact in external system
     */
    identifier?: string;
    /**
     * An object where you can store additional attributes for contact. example {"type":"customer", "age":30}
     */
    additional_attributes?: {
        [key: string]: unknown;
    };
    /**
     * An object where you can store custom attributes for contact. example {"type":"customer", "age":30}, this should have a valid custom attribute definition.
     */
    custom_attributes?: {
        [key: string]: unknown;
    };
};

export type ContactUpdatePayload = {
    /**
     * name of the contact
     */
    name?: string;
    /**
     * email of the contact
     */
    email?: string;
    /**
     * whether the contact is blocked or not
     */
    blocked?: boolean;
    /**
     * phone number of the contact
     */
    phone_number?: string;
    /**
     * Send the form data with the avatar image binary or use the avatar_url
     */
    avatar?: Blob | File;
    /**
     * The url to a jpeg, png file for the contact avatar
     */
    avatar_url?: string;
    /**
     * A unique identifier for the contact in external system
     */
    identifier?: string;
    /**
     * An object where you can store additional attributes for contact. example {"type":"customer", "age":30}
     */
    additional_attributes?: {
        [key: string]: unknown;
    };
    /**
     * An object where you can store custom attributes for contact. example {"type":"customer", "age":30}, this should have a valid custom attribute definition.
     */
    custom_attributes?: {
        [key: string]: unknown;
    };
};

export type ConversationCreatePayload = {
    /**
     * Conversation source id
     */
    source_id: string;
    /**
     * Id of inbox in which the conversation is created <br/> Allowed Inbox Types: Website, Phone, Api, Email
     */
    inbox_id: number;
    /**
     * Contact Id for which conversation is created
     */
    contact_id?: number;
    /**
     * Lets you specify attributes like browser information
     */
    additional_attributes?: {
        [key: string]: unknown;
    };
    /**
     * The object to save custom attributes for conversation, accepts custom attributes key and value
     */
    custom_attributes?: {
        [key: string]: unknown;
    };
    /**
     * Specify the conversation whether it's pending, open, closed
     */
    status?: 'open' | 'resolved' | 'pending';
    /**
     * Agent Id for assigning a conversation to an agent
     */
    assignee_id?: number;
    /**
     * Team Id for assigning a conversation to a team\
     */
    team_id?: number;
    /**
     * Snoozed until date time
     */
    snoozed_until?: string;
    /**
     * The initial message to be sent to the conversation
     */
    message?: {
        /**
         * The content of the message
         */
        content: string;
        /**
         * The template params for the message in case of whatsapp Channel
         */
        template_params?: {
            /**
             * Name of the template
             */
            name?: string;
            /**
             * Category of the template
             */
            category?: string;
            /**
             * Language of the template
             */
            language?: string;
            /**
             * The processed param values for template variables in template
             */
            processed_params?: {
                [key: string]: unknown;
            };
        };
    };
};

export type ConversationMessageCreatePayload = {
    /**
     * The content of the message
     */
    content: string;
    /**
     * The type of the message
     */
    message_type?: 'outgoing' | 'incoming';
    /**
     * Flag to identify if it is a private note
     */
    private?: boolean;
    /**
     * Content type of the message
     */
    content_type?: 'text' | 'input_email' | 'cards' | 'input_select' | 'form' | 'article';
    /**
     * Attributes based on the content type
     */
    content_attributes?: {
        [key: string]: unknown;
    };
    /**
     * The campaign id to which the message belongs
     */
    campaign_id?: number;
    /**
     * WhatsApp template parameters for sending structured messages
     */
    template_params?: {
        /**
         * Name of the WhatsApp template (must be approved in WhatsApp Business Manager)
         */
        name: string;
        /**
         * Category of the template
         */
        category: 'UTILITY' | 'MARKETING' | 'SHIPPING_UPDATE' | 'TICKET_UPDATE' | 'ISSUE_RESOLUTION';
        /**
         * Language code of the template (BCP 47 format)
         */
        language: string;
        /**
         * Processed template parameters organized by component type
         */
        processed_params: {
            /**
             * Body component parameters with variable placeholders
             */
            body?: {
                [key: string]: string;
            };
            /**
             * Header component parameters for media templates
             */
            header?: {
                /**
                 * Publicly accessible URL for IMAGE, VIDEO, or DOCUMENT headers
                 */
                media_url?: string;
                /**
                 * Type of media for the header
                 */
                media_type?: 'image' | 'video' | 'document';
            };
            /**
             * Button component parameters for interactive templates
             */
            buttons?: Array<{
                /**
                 * Type of button parameter
                 */
                type?: 'url' | 'copy_code';
                /**
                 * Dynamic parameter value for the button
                 */
                parameter?: string;
            }>;
        };
    };
};

export type InboxCreatePayload = {
    /**
     * The name of the inbox
     */
    name?: string;
    /**
     * Image file for avatar
     */
    avatar?: Blob | File;
    /**
     * Enable greeting message
     */
    greeting_enabled?: boolean;
    /**
     * Greeting message to be displayed on the widget
     */
    greeting_message?: string;
    /**
     * Enable email collection
     */
    enable_email_collect?: boolean;
    /**
     * Enable CSAT survey
     */
    csat_survey_enabled?: boolean;
    /**
     * Enable Auto Assignment
     */
    enable_auto_assignment?: boolean;
    /**
     * Enable working hours
     */
    working_hours_enabled?: boolean;
    /**
     * Out of office message to be displayed on the widget
     */
    out_of_office_message?: string;
    /**
     * Timezone of the inbox
     */
    timezone?: string;
    /**
     * Allow messages after conversation is resolved
     */
    allow_messages_after_resolved?: boolean;
    /**
     * Lock to single conversation
     */
    lock_to_single_conversation?: boolean;
    /**
     * Id of the help center portal to attach to the inbox
     */
    portal_id?: number;
    /**
     * Sender name type for the inbox
     */
    sender_name_type?: 'friendly' | 'professional';
    /**
     * Business name for the inbox
     */
    business_name?: string;
    channel?: {
        /**
         * Type of the channel
         */
        type?: 'web_widget' | 'api' | 'email' | 'line' | 'telegram' | 'whatsapp' | 'sms';
        /**
         * URL at which the widget will be loaded
         */
        website_url?: string;
        /**
         * Welcome title to be displayed on the widget
         */
        welcome_title?: string;
        /**
         * Welcome tagline to be displayed on the widget
         */
        welcome_tagline?: string;
        /**
         * A Hex-color string used to customize the widget
         */
        widget_color?: string;
    };
};

export type InboxUpdatePayload = {
    /**
     * The name of the inbox
     */
    name?: string;
    /**
     * Image file for avatar
     */
    avatar?: Blob | File;
    /**
     * Enable greeting message
     */
    greeting_enabled?: boolean;
    /**
     * Greeting message to be displayed on the widget
     */
    greeting_message?: string;
    /**
     * Enable email collection
     */
    enable_email_collect?: boolean;
    /**
     * Enable CSAT survey
     */
    csat_survey_enabled?: boolean;
    /**
     * Enable Auto Assignment
     */
    enable_auto_assignment?: boolean;
    /**
     * Enable working hours
     */
    working_hours_enabled?: boolean;
    /**
     * Out of office message to be displayed on the widget
     */
    out_of_office_message?: string;
    /**
     * Timezone of the inbox
     */
    timezone?: string;
    /**
     * Allow messages after conversation is resolved
     */
    allow_messages_after_resolved?: boolean;
    /**
     * Lock to single conversation
     */
    lock_to_single_conversation?: boolean;
    /**
     * Id of the help center portal to attach to the inbox
     */
    portal_id?: number;
    /**
     * Sender name type for the inbox
     */
    sender_name_type?: 'friendly' | 'professional';
    /**
     * Business name for the inbox
     */
    business_name?: string;
    channel?: {
        /**
         * URL at which the widget will be loaded
         */
        website_url?: string;
        /**
         * Welcome title to be displayed on the widget
         */
        welcome_title?: string;
        /**
         * Welcome tagline to be displayed on the widget
         */
        welcome_tagline?: string;
        /**
         * A Hex-color string used to customize the widget
         */
        widget_color?: string;
    };
};

export type TeamCreateUpdatePayload = {
    /**
     * The name of the team
     */
    name?: string;
    /**
     * The description of the team
     */
    description?: string;
    /**
     * If this setting is turned on, the system would automatically assign the conversation to an agent in the team while assigning the conversation to a team
     */
    allow_auto_assign?: boolean;
};

export type CustomFilterCreateUpdatePayload = {
    /**
     * The name of the custom filter
     */
    name?: string;
    /**
     * The description about the custom filter
     */
    type?: 'conversation' | 'contact' | 'report';
    /**
     * A query that needs to be saved as a custom filter
     */
    query?: {
        [key: string]: unknown;
    };
};

export type WebhookCreateUpdatePayload = {
    /**
     * The url where the events should be sent
     */
    url?: string;
    /**
     * The events you want to subscribe to.
     */
    subscriptions?: Array<'conversation_created' | 'conversation_status_changed' | 'conversation_updated' | 'message_created' | 'message_updated' | 'contact_created' | 'contact_updated' | 'webwidget_triggered'>;
};

export type IntegrationsHookCreatePayload = {
    /**
     * The ID of app for which integration hook is being created
     */
    app_id?: number;
    /**
     * The inbox ID, if the hook is an inbox hook
     */
    inbox_id?: number;
    /**
     * The status of the integration (0 for inactive, 1 for active)
     */
    status?: number;
    /**
     * The settings required by the integration
     */
    settings?: {
        [key: string]: unknown;
    };
};

export type IntegrationsHookUpdatePayload = {
    /**
     * The status of the integration (0 for inactive, 1 for active)
     */
    status?: number;
    /**
     * The settings required by the integration
     */
    settings?: {
        [key: string]: unknown;
    };
};

export type AutomationRuleCreateUpdatePayload = {
    /**
     * Rule name
     */
    name?: string;
    /**
     * The description about the automation and actions
     */
    description?: string;
    /**
     * The event when you want to execute the automation actions
     */
    event_name?: 'conversation_created' | 'conversation_updated' | 'conversation_resolved' | 'message_created';
    /**
     * Enable/disable automation rule
     */
    active?: boolean;
    /**
     * Array of actions which you want to perform when condition matches, e.g add label support if message contains content help.
     */
    actions?: Array<{
        [key: string]: unknown;
    }>;
    /**
     * Array of conditions on which conversation filter would work, e.g message content contains text help.
     */
    conditions?: Array<{
        [key: string]: unknown;
    }>;
};

export type PortalCreateUpdatePayload = {
    /**
     * Header color for help-center in hex format
     */
    color?: string;
    /**
     * Custom domain to display help center.
     */
    custom_domain?: string;
    /**
     * Help center header
     */
    header_text?: string;
    /**
     * link to main dashboard
     */
    homepage_link?: string;
    /**
     * Name for the portal
     */
    name?: string;
    /**
     * Page title for the portal
     */
    page_title?: string;
    /**
     * Slug for the portal to display in link
     */
    slug?: string;
    /**
     * Status to check if portal is live
     */
    archived?: boolean;
    /**
     * Configuration about supporting locales
     */
    config?: {
        [key: string]: unknown;
    };
};

export type CategoryCreateUpdatePayload = {
    /**
     * The name of the category
     */
    name?: string;
    /**
     * A description for the category
     */
    description?: string;
    /**
     * Category position in the portal list to sort
     */
    position?: number;
    /**
     * The category slug used in the URL
     */
    slug?: string;
    /**
     * The locale of the category
     */
    locale?: string;
    /**
     * The icon of the category as a string (emoji)
     */
    icon?: string;
    /**
     * To define parent category, e.g product documentation has multiple level features in sales category or in engineering category.
     */
    parent_category_id?: number;
    /**
     * To associate similar categories to each other, e.g same category of product documentation in different languages
     */
    associated_category_id?: number;
};

export type ArticleCreateUpdatePayload = {
    /**
     * The title of the article
     */
    title?: string;
    /**
     * The slug of the article
     */
    slug?: string;
    /**
     * article position in category
     */
    position?: number;
    /**
     * The text content.
     */
    content?: string;
    /**
     * The description of the article
     */
    description?: string;
    /**
     * The category id of the article
     */
    category_id?: number;
    /**
     * The author agent id of the article
     */
    author_id?: number;
    /**
     * To associate similar articles to each other, e.g to provide the link for the reference.
     */
    associated_article_id?: number;
    /**
     * The status of the article. 0 for draft, 1 for published, 2 for archived
     */
    status?: number;
    /**
     * The locale of the article
     */
    locale?: string;
    /**
     * Use for search
     */
    meta?: {
        [key: string]: unknown;
    };
};

export type PublicContactCreateUpdatePayload = {
    /**
     * External identifier of the contact
     */
    identifier?: string;
    /**
     * Identifier hash prepared for HMAC authentication
     */
    identifier_hash?: string;
    /**
     * Email of the contact
     */
    email?: string;
    /**
     * Name of the contact
     */
    name?: string;
    /**
     * Phone number of the contact
     */
    phone_number?: string;
    /**
     * Send the form data with the avatar image binary or use the avatar_url
     */
    avatar?: Blob | File;
    /**
     * Custom attributes of the customer
     */
    custom_attributes?: {
        [key: string]: unknown;
    };
};

export type PublicMessageCreatePayload = {
    /**
     * Content for the message
     */
    content?: string;
    /**
     * Temporary identifier which will be passed back via websockets
     */
    echo_id?: string;
};

export type PublicMessageUpdatePayload = {
    /**
     * Replies to the Bot Message Types
     */
    submitted_values?: {
        /**
         * The name of the submiitted value
         */
        name?: string;
        /**
         * The title of the submitted value
         */
        title?: string;
        /**
         * The value of the submitted value
         */
        value?: string;
        /**
         * The CSAT survey response
         */
        csat_survey_response?: {
            /**
             * The feedback message of the CSAT survey response
             */
            feedback_message?: string;
            /**
             * The rating of the CSAT survey response
             */
            rating?: number;
        };
    };
};

export type PublicConversationCreatePayload = {
    /**
     * Custom attributes of the conversation
     */
    custom_attributes?: {
        [key: string]: unknown;
    };
};

export type ExtendedContact = Contact & {
    /**
     * Id of the user
     */
    id?: number;
    /**
     * Availability status of the user
     */
    availability_status?: 'online' | 'offline';
};

export type ContactBase = GenericId & Contact;

/**
 * array of contacts
 */
export type ContactList = Array<Contact>;

/**
 * array of conversations
 */
export type ContactConversations = Array<Conversation & {
    meta?: {
        sender?: {
            /**
             * The additional attributes of the sender
             */
            additional_attributes?: {
                [key: string]: unknown;
            };
            /**
             * The availability status of the sender
             */
            availability_status?: string;
            /**
             * The email of the sender
             */
            email?: string;
            /**
             * ID fo the sender
             */
            id?: number;
            /**
             * The name of the sender
             */
            name?: string;
            /**
             * The phone number of the sender
             */
            phone_number?: string;
            /**
             * Whether the sender is blocked
             */
            blocked?: boolean;
            /**
             * The identifier of the sender
             */
            identifier?: string;
            /**
             * Avatar URL of the contact
             */
            thumbnail?: string;
            /**
             * The custom attributes of the sender
             */
            custom_attributes?: {
                [key: string]: unknown;
            };
            /**
             * The last activity at of the sender
             */
            last_activity_at?: number;
            /**
             * The created at of the sender
             */
            created_at?: number;
        };
        /**
         * Channel Type
         */
        channel?: string;
        assignee?: User;
        /**
         * Whether the hmac is verified
         */
        hmac_verified?: boolean;
    };
} & {
    display_id?: number;
}>;

export type ContactLabels = {
    /**
     * Array of labels
     */
    payload?: Array<string>;
};

export type ConversationList = {
    data?: {
        meta?: {
            mine_count?: number;
            unassigned_count?: number;
            assigned_count?: number;
            all_count?: number;
        };
        /**
         * array of conversations
         */
        payload?: Array<GenericId & Conversation & {
            meta?: {
                sender?: {
                    /**
                     * The additional attributes of the sender
                     */
                    additional_attributes?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The availability status of the sender
                     */
                    availability_status?: string;
                    /**
                     * The email of the sender
                     */
                    email?: string;
                    /**
                     * ID fo the sender
                     */
                    id?: number;
                    /**
                     * The name of the sender
                     */
                    name?: string;
                    /**
                     * The phone number of the sender
                     */
                    phone_number?: string;
                    /**
                     * Whether the sender is blocked
                     */
                    blocked?: boolean;
                    /**
                     * The identifier of the sender
                     */
                    identifier?: string;
                    /**
                     * Avatar URL of the contact
                     */
                    thumbnail?: string;
                    /**
                     * The custom attributes of the sender
                     */
                    custom_attributes?: {
                        [key: string]: unknown;
                    };
                    /**
                     * The last activity at of the sender
                     */
                    last_activity_at?: number;
                    /**
                     * The created at of the sender
                     */
                    created_at?: number;
                };
                /**
                 * Channel Type
                 */
                channel?: string;
                assignee?: User;
                /**
                 * Whether the hmac is verified
                 */
                hmac_verified?: boolean;
            };
        }>;
    };
};

export type ConversationShow = Conversation & {
    meta?: {
        sender?: {
            /**
             * The additional attributes of the sender
             */
            additional_attributes?: {
                [key: string]: unknown;
            };
            /**
             * The availability status of the sender
             */
            availability_status?: string;
            /**
             * The email of the sender
             */
            email?: string;
            /**
             * ID fo the sender
             */
            id?: number;
            /**
             * The name of the sender
             */
            name?: string;
            /**
             * The phone number of the sender
             */
            phone_number?: string;
            /**
             * Whether the sender is blocked
             */
            blocked?: boolean;
            /**
             * The identifier of the sender
             */
            identifier?: string;
            /**
             * Avatar URL of the contact
             */
            thumbnail?: string;
            /**
             * The custom attributes of the sender
             */
            custom_attributes?: {
                [key: string]: unknown;
            };
            /**
             * The last activity at of the sender
             */
            last_activity_at?: number;
            /**
             * The created at of the sender
             */
            created_at?: number;
        };
        /**
         * Channel Type
         */
        channel?: string;
        assignee?: User;
        /**
         * Whether the hmac is verified
         */
        hmac_verified?: boolean;
    };
};

export type ConversationStatusToggle = {
    meta?: {
        [key: string]: unknown;
    };
    payload?: {
        success?: boolean;
        current_status?: 'open' | 'resolved';
        conversation_id?: number;
    };
};

export type ConversationLabels = {
    /**
     * Array of labels
     */
    payload?: Array<string>;
};

export type AccountSummary = {
    avg_first_response_time?: string;
    avg_resolution_time?: string;
    conversations_count?: number;
    incoming_messages_count?: number;
    outgoing_messages_count?: number;
    resolutions_count?: number;
    previous?: {
        avg_first_response_time?: string;
        avg_resolution_time?: string;
        conversations_count?: number;
        incoming_messages_count?: number;
        outgoing_messages_count?: number;
        resolutions_count?: number;
    };
};

export type AgentConversationMetrics = {
    id?: number;
    name?: string;
    email?: string;
    thumbnail?: string;
    availability?: string;
    metric?: {
        open?: number;
        unattended?: number;
    };
};

export type ContactDetail = {
    /**
     * The object containing additional attributes related to the contact
     */
    additional_attributes?: {
        /**
         * City of the contact
         */
        city?: string;
        /**
         * Country of the contact
         */
        country?: string;
        /**
         * Country code of the contact
         */
        country_code?: string;
        /**
         * IP address when the contact was created
         */
        created_at_ip?: string;
    };
    /**
     * The custom attributes of the contact
     */
    custom_attributes?: {
        [key: string]: unknown;
    };
    /**
     * The email address of the contact
     */
    email?: string;
    /**
     * The ID of the contact
     */
    id?: number;
    /**
     * The identifier of the contact
     */
    identifier?: string | null;
    /**
     * The name of the contact
     */
    name?: string;
    /**
     * The phone number of the contact
     */
    phone_number?: string | null;
    /**
     * The thumbnail of the contact
     */
    thumbnail?: string;
    /**
     * Whether the contact is blocked
     */
    blocked?: boolean;
    /**
     * The type of entity
     */
    type?: 'contact';
};

export type MessageDetailed = {
    /**
     * The ID of the message
     */
    id?: number;
    /**
     * The text content of the message
     */
    content?: string;
    /**
     * The ID of the inbox
     */
    inbox_id?: number;
    /**
     * The ID of the conversation
     */
    conversation_id?: number;
    /**
     * The type of the message (0: incoming, 1: outgoing, 2: activity, 3: template)
     */
    message_type?: 0 | 1 | 2 | 3;
    /**
     * The type of the message content
     */
    content_type?: 'text' | 'input_select' | 'cards' | 'form' | 'input_csat';
    /**
     * The status of the message
     */
    status?: 'sent' | 'delivered' | 'read' | 'failed';
    /**
     * The content attributes for each content_type
     */
    content_attributes?: {
        /**
         * ID of the message this is replying to
         */
        in_reply_to?: string | null;
    };
    /**
     * The timestamp when message was created
     */
    created_at?: number;
    /**
     * The flag which shows whether the message is private or not
     */
    private?: boolean;
    /**
     * The source ID of the message
     */
    source_id?: string | null;
    sender?: ContactDetail;
};

export type ConversationMeta = {
    /**
     * Labels associated with the conversation
     */
    labels?: Array<string>;
    /**
     * Additional attributes of the conversation
     */
    additional_attributes?: {
        browser?: {
            /**
             * Name of the device
             */
            device_name?: string;
            /**
             * Name of the browser
             */
            browser_name?: string;
            /**
             * Name of the platform
             */
            platform_name?: string;
            /**
             * Version of the browser
             */
            browser_version?: string;
            /**
             * Version of the platform
             */
            platform_version?: string;
        };
        /**
         * Referrer URL
         */
        referer?: string;
        initiated_at?: {
            /**
             * Timestamp when the conversation was initiated
             */
            timestamp?: string;
        };
        /**
         * Browser language setting
         */
        browser_language?: string;
        /**
         * Conversation language
         */
        conversation_language?: string;
    };
    contact?: ContactDetail;
    /**
     * Timestamp when the agent last saw the conversation
     */
    agent_last_seen_at?: string | null;
    /**
     * Timestamp when the assignee last saw the conversation
     */
    assignee_last_seen_at?: string | null;
};

export type ConversationMessages = {
    meta?: ConversationMeta;
    /**
     * List of messages in the conversation
     */
    payload?: Array<MessageDetailed>;
};

export type ContactMeta = {
    /**
     * Total number of contacts
     */
    count?: number;
    /**
     * Current page number
     */
    current_page?: string;
};

export type ContactInbox = {
    /**
     * Source identifier for the contact inbox
     */
    source_id?: string;
    inbox?: {
        /**
         * ID of the inbox
         */
        id?: number;
        /**
         * URL for the inbox avatar
         */
        avatar_url?: string;
        /**
         * ID of the channel
         */
        channel_id?: number;
        /**
         * Name of the inbox
         */
        name?: string;
        /**
         * Type of channel
         */
        channel_type?: string;
        /**
         * Provider of the inbox
         */
        provider?: string | null;
    };
};

export type ContactListItem = {
    /**
     * The object containing additional attributes related to the contact
     */
    additional_attributes?: {
        /**
         * City of the contact
         */
        city?: string;
        /**
         * Country of the contact
         */
        country?: string;
        /**
         * Country code of the contact
         */
        country_code?: string;
        /**
         * IP address when the contact was created
         */
        created_at_ip?: string;
    };
    /**
     * Availability status of the contact
     */
    availability_status?: 'online' | 'offline';
    /**
     * The email address of the contact
     */
    email?: string | null;
    /**
     * The ID of the contact
     */
    id?: number;
    /**
     * The name of the contact
     */
    name?: string;
    /**
     * The phone number of the contact
     */
    phone_number?: string | null;
    /**
     * Whether the contact is blocked
     */
    blocked?: boolean;
    /**
     * The identifier of the contact
     */
    identifier?: string | null;
    /**
     * The thumbnail of the contact
     */
    thumbnail?: string;
    /**
     * The custom attributes of the contact
     */
    custom_attributes?: {
        [key: string]: unknown;
    };
    /**
     * Timestamp of last activity
     */
    last_activity_at?: number | null;
    /**
     * Timestamp when contact was created
     */
    created_at?: number;
    /**
     * List of inboxes associated with this contact
     */
    contact_inboxes?: Array<ContactInbox>;
};

export type ContactsListResponse = {
    meta?: ContactMeta;
    /**
     * List of contacts
     */
    payload?: Array<ContactListItem>;
};

export type ContactShowResponse = {
    payload?: ContactListItem;
};

export type ContactConversationMessage = {
    /**
     * ID of the message
     */
    id?: number;
    /**
     * Content of the message
     */
    content?: string;
    /**
     * ID of the account
     */
    account_id?: number;
    /**
     * ID of the inbox
     */
    inbox_id?: number;
    /**
     * ID of the conversation
     */
    conversation_id?: number;
    /**
     * Type of the message
     */
    message_type?: number;
    /**
     * Timestamp when message was created
     */
    created_at?: number;
    /**
     * Formatted datetime when message was updated
     */
    updated_at?: string;
    /**
     * Whether the message is private
     */
    private?: boolean;
    /**
     * Status of the message
     */
    status?: string;
    /**
     * Source ID of the message
     */
    source_id?: string | null;
    /**
     * Type of the content
     */
    content_type?: string;
    /**
     * Attributes of the content
     */
    content_attributes?: {
        [key: string]: unknown;
    };
    /**
     * Type of the sender
     */
    sender_type?: string | null;
    /**
     * ID of the sender
     */
    sender_id?: number | null;
    /**
     * External source IDs
     */
    external_source_ids?: {
        [key: string]: unknown;
    };
    /**
     * Additional attributes of the message
     */
    additional_attributes?: {
        [key: string]: unknown;
    };
    /**
     * Processed message content
     */
    processed_message_content?: string | null;
    /**
     * Sentiment analysis of the message
     */
    sentiment?: {
        [key: string]: unknown;
    };
    /**
     * Conversation details
     */
    conversation?: {
        /**
         * ID of the assignee
         */
        assignee_id?: number | null;
        /**
         * Count of unread messages
         */
        unread_count?: number;
        /**
         * Timestamp of last activity
         */
        last_activity_at?: number;
        /**
         * Contact inbox details
         */
        contact_inbox?: {
            /**
             * Source ID of the contact inbox
             */
            source_id?: string;
        };
    };
    /**
     * Details of the sender
     */
    sender?: {
        /**
         * ID of the sender
         */
        id?: number;
        /**
         * Name of the sender
         */
        name?: string;
        /**
         * Available name of the sender
         */
        available_name?: string;
        /**
         * URL of the sender's avatar
         */
        avatar_url?: string;
        /**
         * Type of the sender
         */
        type?: string;
        /**
         * Availability status of the sender
         */
        availability_status?: string;
        /**
         * Thumbnail URL of the sender
         */
        thumbnail?: string;
    };
};

export type ContactConversationsResponse = {
    /**
     * List of conversations for the contact
     */
    payload?: Array<Conversation & {
        meta?: {
            sender?: {
                /**
                 * The additional attributes of the sender
                 */
                additional_attributes?: {
                    [key: string]: unknown;
                };
                /**
                 * The availability status of the sender
                 */
                availability_status?: string;
                /**
                 * The email of the sender
                 */
                email?: string;
                /**
                 * ID fo the sender
                 */
                id?: number;
                /**
                 * The name of the sender
                 */
                name?: string;
                /**
                 * The phone number of the sender
                 */
                phone_number?: string;
                /**
                 * Whether the sender is blocked
                 */
                blocked?: boolean;
                /**
                 * The identifier of the sender
                 */
                identifier?: string;
                /**
                 * Avatar URL of the contact
                 */
                thumbnail?: string;
                /**
                 * The custom attributes of the sender
                 */
                custom_attributes?: {
                    [key: string]: unknown;
                };
                /**
                 * The last activity at of the sender
                 */
                last_activity_at?: number;
                /**
                 * The created at of the sender
                 */
                created_at?: number;
            };
            /**
             * Channel Type
             */
            channel?: string;
            assignee?: User;
            /**
             * Whether the hmac is verified
             */
            hmac_verified?: boolean;
        };
    }>;
};

export type ContactableInboxesResponse = {
    /**
     * List of contactable inboxes for the contact
     */
    payload?: Array<ContactInbox>;
};

/**
 * The numeric ID of the account
 */
export type AccountId = number;

/**
 * The ID of the agentbot to be updated
 */
export type AgentBotId = number;

/**
 * The ID of the team to be updated
 */
export type TeamId = number;

/**
 * The ID of the Inbox
 */
export type InboxId = number;

/**
 * The numeric ID of the integration hook
 */
export type HookId = number;

/**
 * Id of the session for which the conversation is created.
 *
 *
 *
 * Source Ids can be obtained through contactable inboxes API or via generated.<br/><br/>Website: Chatwoot generated string which can be obtained from webhook events. <br/> Phone Channels(Twilio): Phone number in e164 format <br/> Email Channels: Contact Email address <br/> API Channel: Any Random String
 */
export type SourceId = string;

/**
 * The attribute by which list should be sorted
 */
export type ContactSortParam = 'name' | 'email' | 'phone_number' | 'last_activity_at' | '-name' | '-email' | '-phone_number' | '-last_activity_at';

/**
 * The numeric ID of the conversation
 */
export type ConversationId = number;

/**
 * The uuid of the conversation
 */
export type ConversationUuid = number;

/**
 * The numeric ID of the custom filter
 */
export type CustomFilterId = number;

/**
 * The numeric ID of the webhook
 */
export type WebhookId = number;

/**
 * The numeric ID of the message
 */
export type MessageId = number;

/**
 * The page parameter
 */
export type Page = number;

/**
 * The numeric ID of the user on the platform
 */
export type PlatformUserId = number;

/**
 * Type of report
 */
export type ReportType = 'account' | 'agent' | 'inbox' | 'label' | 'team';

/**
 * The type of metric
 */
export type ReportMetric = 'conversations_count' | 'incoming_messages_count' | 'outgoing_messages_count' | 'avg_first_response_time' | 'avg_resolution_time' | 'resolutions_count';

/**
 * The identifier obtained from API inbox channel
 */
export type PublicInboxIdentifier = string;

/**
 * The source id of contact obtained on contact create
 */
export type PublicContactIdentifier = string;

/**
 * The slug identifier of the portal
 */
export type PortalId = string;

export type CreateAnAccountData = {
    body: AccountCreateUpdatePayload;
    path?: never;
    query?: never;
    url: '/platform/api/v1/accounts';
};

export type CreateAnAccountErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type CreateAnAccountError = CreateAnAccountErrors[keyof CreateAnAccountErrors];

export type CreateAnAccountResponses = {
    /**
     * Success
     */
    200: PlatformAccount;
};

export type CreateAnAccountResponse = CreateAnAccountResponses[keyof CreateAnAccountResponses];

export type DeleteAnAccountData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/platform/api/v1/accounts/{account_id}';
};

export type DeleteAnAccountErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The account does not exist
     */
    404: BadRequestError;
};

export type DeleteAnAccountError = DeleteAnAccountErrors[keyof DeleteAnAccountErrors];

export type DeleteAnAccountResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetDetailsOfAnAccountData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/platform/api/v1/accounts/{account_id}';
};

export type GetDetailsOfAnAccountErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The given account does not exist
     */
    404: BadRequestError;
};

export type GetDetailsOfAnAccountError = GetDetailsOfAnAccountErrors[keyof GetDetailsOfAnAccountErrors];

export type GetDetailsOfAnAccountResponses = {
    /**
     * Success
     */
    200: PlatformAccount;
};

export type GetDetailsOfAnAccountResponse = GetDetailsOfAnAccountResponses[keyof GetDetailsOfAnAccountResponses];

export type UpdateAnAccountData = {
    body: AccountCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/platform/api/v1/accounts/{account_id}';
};

export type UpdateAnAccountErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type UpdateAnAccountError = UpdateAnAccountErrors[keyof UpdateAnAccountErrors];

export type UpdateAnAccountResponses = {
    /**
     * Success
     */
    200: PlatformAccount;
};

export type UpdateAnAccountResponse = UpdateAnAccountResponses[keyof UpdateAnAccountResponses];

export type DeleteAnAccountUserData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/platform/api/v1/accounts/{account_id}/account_users';
};

export type DeleteAnAccountUserErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The account does not exist
     */
    404: BadRequestError;
};

export type DeleteAnAccountUserError = DeleteAnAccountUserErrors[keyof DeleteAnAccountUserErrors];

export type DeleteAnAccountUserResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type ListAllAccountUsersData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/platform/api/v1/accounts/{account_id}/account_users';
};

export type ListAllAccountUsersErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type ListAllAccountUsersError = ListAllAccountUsersErrors[keyof ListAllAccountUsersErrors];

export type ListAllAccountUsersResponses = {
    /**
     * Success
     */
    200: AccountUser;
};

export type ListAllAccountUsersResponse = ListAllAccountUsersResponses[keyof ListAllAccountUsersResponses];

export type CreateAnAccountUserData = {
    body: AccountUserCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/platform/api/v1/accounts/{account_id}/account_users';
};

export type CreateAnAccountUserErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type CreateAnAccountUserError = CreateAnAccountUserErrors[keyof CreateAnAccountUserErrors];

export type CreateAnAccountUserResponses = {
    /**
     * Success
     */
    200: {
        /**
         * The ID of the account
         */
        account_id?: number;
        /**
         * The ID of the user
         */
        user_id?: number;
        /**
         * whether user is an administrator or agent
         */
        role?: string;
    };
};

export type CreateAnAccountUserResponse = CreateAnAccountUserResponses[keyof CreateAnAccountUserResponses];

export type ListAllAgentBotsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/platform/api/v1/agent_bots';
};

export type ListAllAgentBotsErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type ListAllAgentBotsError = ListAllAgentBotsErrors[keyof ListAllAgentBotsErrors];

export type ListAllAgentBotsResponses = {
    /**
     * Array of agent bots
     */
    200: Array<AgentBot>;
};

export type ListAllAgentBotsResponse = ListAllAgentBotsResponses[keyof ListAllAgentBotsResponses];

export type CreateAnAgentBotData = {
    body: PlatformAgentBotCreateUpdatePayload;
    path?: never;
    query?: never;
    url: '/platform/api/v1/agent_bots';
};

export type CreateAnAgentBotErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type CreateAnAgentBotError = CreateAnAgentBotErrors[keyof CreateAnAgentBotErrors];

export type CreateAnAgentBotResponses = {
    /**
     * Success
     */
    200: AgentBot;
};

export type CreateAnAgentBotResponse = CreateAnAgentBotResponses[keyof CreateAnAgentBotResponses];

export type DeleteAnAgentBotData = {
    body?: never;
    path: {
        /**
         * The ID of the agentbot to be updated
         */
        id: number;
    };
    query?: never;
    url: '/platform/api/v1/agent_bots/{id}';
};

export type DeleteAnAgentBotErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The agent bot does not exist
     */
    404: BadRequestError;
};

export type DeleteAnAgentBotError = DeleteAnAgentBotErrors[keyof DeleteAnAgentBotErrors];

export type DeleteAnAgentBotResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetDetailsOfASingleAgentBotData = {
    body?: never;
    path: {
        /**
         * The ID of the agentbot to be updated
         */
        id: number;
    };
    query?: never;
    url: '/platform/api/v1/agent_bots/{id}';
};

export type GetDetailsOfASingleAgentBotErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The given agent bot ID does not exist
     */
    404: BadRequestError;
};

export type GetDetailsOfASingleAgentBotError = GetDetailsOfASingleAgentBotErrors[keyof GetDetailsOfASingleAgentBotErrors];

export type GetDetailsOfASingleAgentBotResponses = {
    /**
     * Success
     */
    200: AgentBot;
};

export type GetDetailsOfASingleAgentBotResponse = GetDetailsOfASingleAgentBotResponses[keyof GetDetailsOfASingleAgentBotResponses];

export type UpdateAnAgentBotData = {
    body: PlatformAgentBotCreateUpdatePayload;
    path: {
        /**
         * The ID of the agentbot to be updated
         */
        id: number;
    };
    query?: never;
    url: '/platform/api/v1/agent_bots/{id}';
};

export type UpdateAnAgentBotErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type UpdateAnAgentBotError = UpdateAnAgentBotErrors[keyof UpdateAnAgentBotErrors];

export type UpdateAnAgentBotResponses = {
    /**
     * Success
     */
    200: AgentBot;
};

export type UpdateAnAgentBotResponse = UpdateAnAgentBotResponses[keyof UpdateAnAgentBotResponses];

export type CreateAuserData = {
    body: UserCreateUpdatePayload;
    path?: never;
    query?: never;
    url: '/platform/api/v1/users';
};

export type CreateAuserErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type CreateAuserError = CreateAuserErrors[keyof CreateAuserErrors];

export type CreateAuserResponses = {
    /**
     * Success
     */
    200: User;
};

export type CreateAuserResponse = CreateAuserResponses[keyof CreateAuserResponses];

export type DeleteAuserData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the user on the platform
         */
        id: number;
    };
    query?: never;
    url: '/platform/api/v1/users/{id}';
};

export type DeleteAuserErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The user does not exist
     */
    404: BadRequestError;
};

export type DeleteAuserError = DeleteAuserErrors[keyof DeleteAuserErrors];

export type DeleteAuserResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetDetailsOfAuserData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the user on the platform
         */
        id: number;
    };
    query?: never;
    url: '/platform/api/v1/users/{id}';
};

export type GetDetailsOfAuserErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The given user does not exist
     */
    404: BadRequestError;
};

export type GetDetailsOfAuserError = GetDetailsOfAuserErrors[keyof GetDetailsOfAuserErrors];

export type GetDetailsOfAuserResponses = {
    /**
     * Success
     */
    200: User;
};

export type GetDetailsOfAuserResponse = GetDetailsOfAuserResponses[keyof GetDetailsOfAuserResponses];

export type UpdateAuserData = {
    body: UserCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the user on the platform
         */
        id: number;
    };
    query?: never;
    url: '/platform/api/v1/users/{id}';
};

export type UpdateAuserErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type UpdateAuserError = UpdateAuserErrors[keyof UpdateAuserErrors];

export type UpdateAuserResponses = {
    /**
     * Success
     */
    200: User;
};

export type UpdateAuserResponse = UpdateAuserResponses[keyof UpdateAuserResponses];

export type GetSsoUrlOfAuserData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the user on the platform
         */
        id: number;
    };
    query?: never;
    url: '/platform/api/v1/users/{id}/login';
};

export type GetSsoUrlOfAuserErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The given user does not exist
     */
    404: BadRequestError;
};

export type GetSsoUrlOfAuserError = GetSsoUrlOfAuserErrors[keyof GetSsoUrlOfAuserErrors];

export type GetSsoUrlOfAuserResponses = {
    /**
     * Success
     */
    200: {
        /**
         * SSO url to autenticate the user
         */
        url?: string;
    };
};

export type GetSsoUrlOfAuserResponse = GetSsoUrlOfAuserResponses[keyof GetSsoUrlOfAuserResponses];

export type GetDetailsOfAInboxData = {
    body?: never;
    path: {
        /**
         * The identifier obtained from API inbox channel
         */
        inbox_identifier: string;
    };
    query?: never;
    url: '/public/api/v1/inboxes/{inbox_identifier}';
};

export type GetDetailsOfAInboxErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The given inbox does not exist
     */
    404: BadRequestError;
};

export type GetDetailsOfAInboxError = GetDetailsOfAInboxErrors[keyof GetDetailsOfAInboxErrors];

export type GetDetailsOfAInboxResponses = {
    /**
     * Success
     */
    200: PublicInbox;
};

export type GetDetailsOfAInboxResponse = GetDetailsOfAInboxResponses[keyof GetDetailsOfAInboxResponses];

export type CreateAContactData = {
    body: PublicContactCreateUpdatePayload;
    path: {
        /**
         * The identifier obtained from API inbox channel
         */
        inbox_identifier: string;
    };
    query?: never;
    url: '/public/api/v1/inboxes/{inbox_identifier}/contacts';
};

export type CreateAContactErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type CreateAContactError = CreateAContactErrors[keyof CreateAContactErrors];

export type CreateAContactResponses = {
    /**
     * Success
     */
    200: PublicContact;
};

export type CreateAContactResponse = CreateAContactResponses[keyof CreateAContactResponses];

export type GetDetailsOfAContactData = {
    body?: never;
    path: {
        /**
         * The identifier obtained from API inbox channel
         */
        inbox_identifier: string;
        /**
         * The source id of contact obtained on contact create
         */
        contact_identifier: string;
    };
    query?: never;
    url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}';
};

export type GetDetailsOfAContactErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The given contact does not exist
     */
    404: BadRequestError;
};

export type GetDetailsOfAContactError = GetDetailsOfAContactErrors[keyof GetDetailsOfAContactErrors];

export type GetDetailsOfAContactResponses = {
    /**
     * Success
     */
    200: PublicContact;
};

export type GetDetailsOfAContactResponse = GetDetailsOfAContactResponses[keyof GetDetailsOfAContactResponses];

export type UpdateAContactData = {
    body: PublicContactCreateUpdatePayload;
    path: {
        /**
         * The identifier obtained from API inbox channel
         */
        inbox_identifier: string;
        /**
         * The source id of contact obtained on contact create
         */
        contact_identifier: string;
    };
    query?: never;
    url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}';
};

export type UpdateAContactErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type UpdateAContactError = UpdateAContactErrors[keyof UpdateAContactErrors];

export type UpdateAContactResponses = {
    /**
     * Success
     */
    200: PublicContact;
};

export type UpdateAContactResponse = UpdateAContactResponses[keyof UpdateAContactResponses];

export type ListAllContactConversationsData = {
    body?: never;
    path: {
        /**
         * The identifier obtained from API inbox channel
         */
        inbox_identifier: string;
        /**
         * The source id of contact obtained on contact create
         */
        contact_identifier: string;
    };
    query?: never;
    url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations';
};

export type ListAllContactConversationsErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type ListAllContactConversationsError = ListAllContactConversationsErrors[keyof ListAllContactConversationsErrors];

export type ListAllContactConversationsResponses = {
    /**
     * Array of conversations
     */
    200: Array<PublicConversation>;
};

export type ListAllContactConversationsResponse = ListAllContactConversationsResponses[keyof ListAllContactConversationsResponses];

export type CreateAConversationData = {
    body: PublicConversationCreatePayload;
    path: {
        /**
         * The identifier obtained from API inbox channel
         */
        inbox_identifier: string;
        /**
         * The source id of contact obtained on contact create
         */
        contact_identifier: string;
    };
    query?: never;
    url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations';
};

export type CreateAConversationErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type CreateAConversationError = CreateAConversationErrors[keyof CreateAConversationErrors];

export type CreateAConversationResponses = {
    /**
     * Success
     */
    200: PublicConversation;
};

export type CreateAConversationResponse = CreateAConversationResponses[keyof CreateAConversationResponses];

export type GetSingleConversationData = {
    body?: never;
    path: {
        /**
         * The identifier obtained from API inbox channel
         */
        inbox_identifier: string;
        /**
         * The source id of contact obtained on contact create
         */
        contact_identifier: string;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
    };
    query?: never;
    url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations/{conversation_id}';
};

export type GetSingleConversationErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * Conversation not found
     */
    404: BadRequestError;
};

export type GetSingleConversationError = GetSingleConversationErrors[keyof GetSingleConversationErrors];

export type GetSingleConversationResponses = {
    /**
     * Success
     */
    200: PublicConversation;
};

export type GetSingleConversationResponse = GetSingleConversationResponses[keyof GetSingleConversationResponses];

export type ResolveConversationData = {
    body?: never;
    path: {
        /**
         * The identifier obtained from API inbox channel
         */
        inbox_identifier: string;
        /**
         * The source id of contact obtained on contact create
         */
        contact_identifier: string;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
    };
    query?: never;
    url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations/{conversation_id}/toggle_status';
};

export type ResolveConversationErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * Conversation not found
     */
    404: BadRequestError;
};

export type ResolveConversationError = ResolveConversationErrors[keyof ResolveConversationErrors];

export type ResolveConversationResponses = {
    /**
     * Conversation resolved successfully
     */
    200: PublicConversation;
};

export type ResolveConversationResponse = ResolveConversationResponses[keyof ResolveConversationResponses];

export type ToggleTypingStatusData = {
    body: {
        /**
         * The typing status to set
         */
        typing_status?: 'on' | 'off';
    };
    path: {
        /**
         * The identifier obtained from API inbox channel
         */
        inbox_identifier: string;
        /**
         * The source id of contact obtained on contact create
         */
        contact_identifier: string;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
    };
    query: {
        /**
         * Typing status, either 'on' or 'off'
         */
        typing_status: string;
    };
    url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations/{conversation_id}/toggle_typing';
};

export type ToggleTypingStatusErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * Conversation not found
     */
    404: BadRequestError;
};

export type ToggleTypingStatusError = ToggleTypingStatusErrors[keyof ToggleTypingStatusErrors];

export type ToggleTypingStatusResponses = {
    /**
     * Typing status toggled successfully
     */
    200: unknown;
};

export type UpdateLastSeenData = {
    body?: never;
    path: {
        /**
         * The identifier obtained from API inbox channel
         */
        inbox_identifier: string;
        /**
         * The source id of contact obtained on contact create
         */
        contact_identifier: string;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
    };
    query?: never;
    url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations/{conversation_id}/update_last_seen';
};

export type UpdateLastSeenErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * Conversation not found
     */
    404: BadRequestError;
};

export type UpdateLastSeenError = UpdateLastSeenErrors[keyof UpdateLastSeenErrors];

export type UpdateLastSeenResponses = {
    /**
     * Last seen updated successfully
     */
    200: unknown;
};

export type ListAllConverationMessagesData = {
    body?: never;
    path: {
        /**
         * The identifier obtained from API inbox channel
         */
        inbox_identifier: string;
        /**
         * The source id of contact obtained on contact create
         */
        contact_identifier: string;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
    };
    query?: never;
    url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations/{conversation_id}/messages';
};

export type ListAllConverationMessagesErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type ListAllConverationMessagesError = ListAllConverationMessagesErrors[keyof ListAllConverationMessagesErrors];

export type ListAllConverationMessagesResponses = {
    /**
     * Array of messages
     */
    200: Array<PublicMessage>;
};

export type ListAllConverationMessagesResponse = ListAllConverationMessagesResponses[keyof ListAllConverationMessagesResponses];

export type CreateAMessageData = {
    body: PublicMessageCreatePayload;
    path: {
        /**
         * The identifier obtained from API inbox channel
         */
        inbox_identifier: string;
        /**
         * The source id of contact obtained on contact create
         */
        contact_identifier: string;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
    };
    query?: never;
    url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations/{conversation_id}/messages';
};

export type CreateAMessageErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type CreateAMessageError = CreateAMessageErrors[keyof CreateAMessageErrors];

export type CreateAMessageResponses = {
    /**
     * Success
     */
    200: PublicMessage;
};

export type CreateAMessageResponse = CreateAMessageResponses[keyof CreateAMessageResponses];

export type UpdateAMessageData = {
    body: PublicMessageUpdatePayload;
    path: {
        /**
         * The identifier obtained from API inbox channel
         */
        inbox_identifier: string;
        /**
         * The source id of contact obtained on contact create
         */
        contact_identifier: string;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
        /**
         * The numeric ID of the message
         */
        message_id: number;
    };
    query?: never;
    url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations/{conversation_id}/messages/{message_id}';
};

export type UpdateAMessageErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type UpdateAMessageError = UpdateAMessageErrors[keyof UpdateAMessageErrors];

export type UpdateAMessageResponses = {
    /**
     * Success
     */
    200: PublicMessage;
};

export type UpdateAMessageResponse = UpdateAMessageResponses[keyof UpdateAMessageResponses];

export type GetCsatSurveyPageData = {
    body?: never;
    path: {
        /**
         * The uuid of the conversation
         */
        conversation_uuid: number;
    };
    query?: never;
    url: '/survey/responses/{conversation_uuid}';
};

export type GetCsatSurveyPageResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetAccountDetailsData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{id}';
};

export type GetAccountDetailsErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * Account not found
     */
    404: BadRequestError;
};

export type GetAccountDetailsError = GetAccountDetailsErrors[keyof GetAccountDetailsErrors];

export type GetAccountDetailsResponses = {
    /**
     * Success
     */
    200: AccountShowResponse;
};

export type GetAccountDetailsResponse = GetAccountDetailsResponses[keyof GetAccountDetailsResponses];

export type UpdateAccountData = {
    body: AccountUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{id}';
};

export type UpdateAccountErrors = {
    /**
     * Unauthorized (requires administrator role)
     */
    401: BadRequestError;
    /**
     * Account not found
     */
    404: BadRequestError;
    /**
     * Validation error
     */
    422: BadRequestError;
};

export type UpdateAccountError = UpdateAccountErrors[keyof UpdateAccountErrors];

export type UpdateAccountResponses = {
    /**
     * Success
     */
    200: AccountDetail;
};

export type UpdateAccountResponse = UpdateAccountResponses[keyof UpdateAccountResponses];

export type GetAccountAuditLogsData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: {
        /**
         * Page number for pagination
         */
        page?: number;
    };
    url: '/api/v1/accounts/{account_id}/audit_logs';
};

export type GetAccountAuditLogsErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Feature not enabled or not available in current plan
     */
    422: BadRequestError;
};

export type GetAccountAuditLogsError = GetAccountAuditLogsErrors[keyof GetAccountAuditLogsErrors];

export type GetAccountAuditLogsResponses = {
    /**
     * Success
     */
    200: {
        /**
         * Number of items per page
         */
        per_page?: number;
        /**
         * Total number of audit log entries
         */
        total_entries?: number;
        /**
         * Current page number
         */
        current_page?: number;
        /**
         * Array of audit log entries
         */
        audit_logs?: Array<AuditLog>;
    };
};

export type GetAccountAuditLogsResponse = GetAccountAuditLogsResponses[keyof GetAccountAuditLogsResponses];

export type ListAllAccountAgentBotsData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/agent_bots';
};

export type ListAllAccountAgentBotsErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type ListAllAccountAgentBotsError = ListAllAccountAgentBotsErrors[keyof ListAllAccountAgentBotsErrors];

export type ListAllAccountAgentBotsResponses = {
    /**
     * Array of agent bots
     */
    200: Array<AgentBot>;
};

export type ListAllAccountAgentBotsResponse = ListAllAccountAgentBotsResponses[keyof ListAllAccountAgentBotsResponses];

export type CreateAnAccountAgentBotData = {
    body: AgentBotCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/agent_bots';
};

export type CreateAnAccountAgentBotErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type CreateAnAccountAgentBotError = CreateAnAccountAgentBotErrors[keyof CreateAnAccountAgentBotErrors];

export type CreateAnAccountAgentBotResponses = {
    /**
     * Success
     */
    200: AgentBot;
};

export type CreateAnAccountAgentBotResponse = CreateAnAccountAgentBotResponses[keyof CreateAnAccountAgentBotResponses];

export type DeleteAnAccountAgentBotData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the agentbot to be updated
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/agent_bots/{id}';
};

export type DeleteAnAccountAgentBotErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The agent bot does not exist in the account
     */
    404: BadRequestError;
};

export type DeleteAnAccountAgentBotError = DeleteAnAccountAgentBotErrors[keyof DeleteAnAccountAgentBotErrors];

export type DeleteAnAccountAgentBotResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetDetailsOfASingleAccountAgentBotData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the agentbot to be updated
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/agent_bots/{id}';
};

export type GetDetailsOfASingleAccountAgentBotErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The given agent bot ID does not exist in the account
     */
    404: BadRequestError;
};

export type GetDetailsOfASingleAccountAgentBotError = GetDetailsOfASingleAccountAgentBotErrors[keyof GetDetailsOfASingleAccountAgentBotErrors];

export type GetDetailsOfASingleAccountAgentBotResponses = {
    /**
     * Success
     */
    200: AgentBot;
};

export type GetDetailsOfASingleAccountAgentBotResponse = GetDetailsOfASingleAccountAgentBotResponses[keyof GetDetailsOfASingleAccountAgentBotResponses];

export type UpdateAnAccountAgentBotData = {
    body: AgentBotCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the agentbot to be updated
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/agent_bots/{id}';
};

export type UpdateAnAccountAgentBotErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type UpdateAnAccountAgentBotError = UpdateAnAccountAgentBotErrors[keyof UpdateAnAccountAgentBotErrors];

export type UpdateAnAccountAgentBotResponses = {
    /**
     * Success
     */
    200: AgentBot;
};

export type UpdateAnAccountAgentBotResponse = UpdateAnAccountAgentBotResponses[keyof UpdateAnAccountAgentBotResponses];

export type GetAccountAgentsData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/agents';
};

export type GetAccountAgentsErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
};

export type GetAccountAgentsError = GetAccountAgentsErrors[keyof GetAccountAgentsErrors];

export type GetAccountAgentsResponses = {
    /**
     * Array of all active agents
     */
    200: Array<Agent>;
};

export type GetAccountAgentsResponse = GetAccountAgentsResponses[keyof GetAccountAgentsResponses];

export type AddNewAgentToAccountData = {
    body: AgentCreatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/agents';
};

export type AddNewAgentToAccountErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
};

export type AddNewAgentToAccountError = AddNewAgentToAccountErrors[keyof AddNewAgentToAccountErrors];

export type AddNewAgentToAccountResponses = {
    /**
     * Success
     */
    200: Agent;
};

export type AddNewAgentToAccountResponse = AddNewAgentToAccountResponses[keyof AddNewAgentToAccountResponses];

export type DeleteAgentFromAccountData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the agent to be deleted.
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/agents/{id}';
};

export type DeleteAgentFromAccountErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Agent not found
     */
    404: BadRequestError;
};

export type DeleteAgentFromAccountError = DeleteAgentFromAccountErrors[keyof DeleteAgentFromAccountErrors];

export type DeleteAgentFromAccountResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type UpdateAgentInAccountData = {
    body: AgentUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the agent to be updated.
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/agents/{id}';
};

export type UpdateAgentInAccountErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Agent not found
     */
    404: BadRequestError;
};

export type UpdateAgentInAccountError = UpdateAgentInAccountErrors[keyof UpdateAgentInAccountErrors];

export type UpdateAgentInAccountResponses = {
    /**
     * Success
     */
    200: Agent;
};

export type UpdateAgentInAccountResponse = UpdateAgentInAccountResponses[keyof UpdateAgentInAccountResponses];

export type GetAccountCannedResponseData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/canned_responses';
};

export type GetAccountCannedResponseErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
};

export type GetAccountCannedResponseError = GetAccountCannedResponseErrors[keyof GetAccountCannedResponseErrors];

export type GetAccountCannedResponseResponses = {
    /**
     * Array of all canned responses
     */
    200: Array<CannedResponse>;
};

export type GetAccountCannedResponseResponse = GetAccountCannedResponseResponses[keyof GetAccountCannedResponseResponses];

export type AddNewCannedResponseToAccountData = {
    body: CannedResponseCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/canned_responses';
};

export type AddNewCannedResponseToAccountErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
};

export type AddNewCannedResponseToAccountError = AddNewCannedResponseToAccountErrors[keyof AddNewCannedResponseToAccountErrors];

export type AddNewCannedResponseToAccountResponses = {
    /**
     * Success
     */
    200: CannedResponse;
};

export type AddNewCannedResponseToAccountResponse = AddNewCannedResponseToAccountResponses[keyof AddNewCannedResponseToAccountResponses];

export type DeleteCannedResponseFromAccountData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the canned response to be deleted
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/canned_responses/{id}';
};

export type DeleteCannedResponseFromAccountErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Canned Response not found
     */
    404: BadRequestError;
};

export type DeleteCannedResponseFromAccountError = DeleteCannedResponseFromAccountErrors[keyof DeleteCannedResponseFromAccountErrors];

export type DeleteCannedResponseFromAccountResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type UpdateCannedResponseInAccountData = {
    body: CannedResponseCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the canned response to be updated.
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/canned_responses/{id}';
};

export type UpdateCannedResponseInAccountErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Agent not found
     */
    404: BadRequestError;
};

export type UpdateCannedResponseInAccountError = UpdateCannedResponseInAccountErrors[keyof UpdateCannedResponseInAccountErrors];

export type UpdateCannedResponseInAccountResponses = {
    /**
     * Success
     */
    200: CannedResponse;
};

export type UpdateCannedResponseInAccountResponse = UpdateCannedResponseInAccountResponses[keyof UpdateCannedResponseInAccountResponses];

export type GetAccountCustomAttributeData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query: {
        /**
         * conversation_attribute(0)/contact_attribute(1)
         */
        attribute_model: '0' | '1';
    };
    url: '/api/v1/accounts/{account_id}/custom_attribute_definitions';
};

export type GetAccountCustomAttributeErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
};

export type GetAccountCustomAttributeError = GetAccountCustomAttributeErrors[keyof GetAccountCustomAttributeErrors];

export type GetAccountCustomAttributeResponses = {
    /**
     * Array of all custom attributes
     */
    200: Array<CustomAttribute>;
};

export type GetAccountCustomAttributeResponse = GetAccountCustomAttributeResponses[keyof GetAccountCustomAttributeResponses];

export type AddNewCustomAttributeToAccountData = {
    body: CustomAttributeCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/custom_attribute_definitions';
};

export type AddNewCustomAttributeToAccountErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
};

export type AddNewCustomAttributeToAccountError = AddNewCustomAttributeToAccountErrors[keyof AddNewCustomAttributeToAccountErrors];

export type AddNewCustomAttributeToAccountResponses = {
    /**
     * Success
     */
    200: CustomAttribute;
};

export type AddNewCustomAttributeToAccountResponse = AddNewCustomAttributeToAccountResponses[keyof AddNewCustomAttributeToAccountResponses];

export type DeleteCustomAttributeFromAccountData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the custom attribute to be deleted
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/custom_attribute_definitions/{id}';
};

export type DeleteCustomAttributeFromAccountErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Custom attribute not found
     */
    404: BadRequestError;
};

export type DeleteCustomAttributeFromAccountError = DeleteCustomAttributeFromAccountErrors[keyof DeleteCustomAttributeFromAccountErrors];

export type DeleteCustomAttributeFromAccountResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetDetailsOfASingleCustomAttributeData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the custom attribute to be updated.
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/custom_attribute_definitions/{id}';
};

export type GetDetailsOfASingleCustomAttributeErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The given attribute ID does not exist in the account
     */
    404: BadRequestError;
};

export type GetDetailsOfASingleCustomAttributeError = GetDetailsOfASingleCustomAttributeErrors[keyof GetDetailsOfASingleCustomAttributeErrors];

export type GetDetailsOfASingleCustomAttributeResponses = {
    /**
     * Success
     */
    200: CustomAttribute;
};

export type GetDetailsOfASingleCustomAttributeResponse = GetDetailsOfASingleCustomAttributeResponses[keyof GetDetailsOfASingleCustomAttributeResponses];

export type UpdateCustomAttributeInAccountData = {
    body: CustomAttributeCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the custom attribute to be updated.
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/custom_attribute_definitions/{id}';
};

export type UpdateCustomAttributeInAccountErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Agent not found
     */
    404: BadRequestError;
};

export type UpdateCustomAttributeInAccountError = UpdateCustomAttributeInAccountErrors[keyof UpdateCustomAttributeInAccountErrors];

export type UpdateCustomAttributeInAccountResponses = {
    /**
     * Success
     */
    200: CustomAttribute;
};

export type UpdateCustomAttributeInAccountResponse = UpdateCustomAttributeInAccountResponses[keyof UpdateCustomAttributeInAccountResponses];

export type ContactListData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: {
        /**
         * The attribute by which list should be sorted
         */
        sort?: 'name' | 'email' | 'phone_number' | 'last_activity_at' | '-name' | '-email' | '-phone_number' | '-last_activity_at';
        /**
         * The page parameter
         */
        page?: number;
    };
    url: '/api/v1/accounts/{account_id}/contacts';
};

export type ContactListErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestError;
};

export type ContactListError = ContactListErrors[keyof ContactListErrors];

export type ContactListResponses = {
    /**
     * Success
     */
    200: ContactsListResponse;
};

export type ContactListResponse = ContactListResponses[keyof ContactListResponses];

export type ContactCreateData = {
    body: ContactCreatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/contacts';
};

export type ContactCreateErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestError;
};

export type ContactCreateError = ContactCreateErrors[keyof ContactCreateErrors];

export type ContactCreateResponses = {
    /**
     * Success
     */
    200: ExtendedContact;
};

export type ContactCreateResponse = ContactCreateResponses[keyof ContactCreateResponses];

export type ContactDeleteData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * ID of the contact
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/contacts/{id}';
};

export type ContactDeleteErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * Contact not found
     */
    404: BadRequestError;
};

export type ContactDeleteError = ContactDeleteErrors[keyof ContactDeleteErrors];

export type ContactDeleteResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type ContactDetailsData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * ID of the contact
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/contacts/{id}';
};

export type ContactDetailsErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Contact not found
     */
    404: BadRequestError;
};

export type ContactDetailsError = ContactDetailsErrors[keyof ContactDetailsErrors];

export type ContactDetailsResponses = {
    /**
     * Success
     */
    200: ContactShowResponse;
};

export type ContactDetailsResponse = ContactDetailsResponses[keyof ContactDetailsResponses];

export type ContactUpdateData = {
    body: ContactUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * ID of the contact
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/contacts/{id}';
};

export type ContactUpdateErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Contact not found
     */
    404: BadRequestError;
};

export type ContactUpdateError = ContactUpdateErrors[keyof ContactUpdateErrors];

export type ContactUpdateResponses = {
    /**
     * Success
     */
    204: ContactBase;
};

export type ContactUpdateResponse = ContactUpdateResponses[keyof ContactUpdateResponses];

export type ContactConversationsData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * ID of the contact
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/contacts/{id}/conversations';
};

export type ContactConversationsErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Contact not found
     */
    404: BadRequestError;
};

export type ContactConversationsError = ContactConversationsErrors[keyof ContactConversationsErrors];

export type ContactConversationsResponses = {
    /**
     * Success
     */
    200: ContactConversationsResponse;
};

export type ContactConversationsResponse2 = ContactConversationsResponses[keyof ContactConversationsResponses];

export type ListAllLabelsOfAContactData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * ID of the contact
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/contacts/{id}/labels';
};

export type ListAllLabelsOfAContactErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * Contact not found
     */
    404: BadRequestError;
};

export type ListAllLabelsOfAContactError = ListAllLabelsOfAContactErrors[keyof ListAllLabelsOfAContactErrors];

export type ListAllLabelsOfAContactResponses = {
    /**
     * Success
     */
    200: ContactLabels;
};

export type ListAllLabelsOfAContactResponse = ListAllLabelsOfAContactResponses[keyof ListAllLabelsOfAContactResponses];

export type ContactAddLabelsData = {
    body: {
        /**
         * Array of labels (comma-separated strings)
         */
        labels: Array<string>;
    };
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * ID of the contact
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/contacts/{id}/labels';
};

export type ContactAddLabelsErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * Contact not found
     */
    404: BadRequestError;
};

export type ContactAddLabelsError = ContactAddLabelsErrors[keyof ContactAddLabelsErrors];

export type ContactAddLabelsResponses = {
    /**
     * Success
     */
    200: ContactLabels;
};

export type ContactAddLabelsResponse = ContactAddLabelsResponses[keyof ContactAddLabelsResponses];

export type ContactSearchData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: {
        /**
         * Search using contact `name`, `identifier`, `email` or `phone number`
         */
        q?: string;
        /**
         * The attribute by which list should be sorted
         */
        sort?: 'name' | 'email' | 'phone_number' | 'last_activity_at' | '-name' | '-email' | '-phone_number' | '-last_activity_at';
        /**
         * The page parameter
         */
        page?: number;
    };
    url: '/api/v1/accounts/{account_id}/contacts/search';
};

export type ContactSearchErrors = {
    /**
     * Authentication error
     */
    401: BadRequestError;
};

export type ContactSearchError = ContactSearchErrors[keyof ContactSearchErrors];

export type ContactSearchResponses = {
    /**
     * Success
     */
    200: ContactsListResponse;
};

export type ContactSearchResponse = ContactSearchResponses[keyof ContactSearchResponses];

export type ContactFilterData = {
    body: {
        payload?: Array<{
            /**
             * filter attribute name
             */
            attribute_key?: string;
            /**
             * filter operator name
             */
            filter_operator?: 'equal_to' | 'not_equal_to' | 'contains' | 'does_not_contain';
            /**
             * array of the attribute values to filter
             */
            values?: Array<string>;
            /**
             * query operator name
             */
            query_operator?: 'AND' | 'OR';
        }>;
    };
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: {
        page?: number;
    };
    url: '/api/v1/accounts/{account_id}/contacts/filter';
};

export type ContactFilterErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestError;
};

export type ContactFilterError = ContactFilterErrors[keyof ContactFilterErrors];

export type ContactFilterResponses = {
    /**
     * Success
     */
    200: ContactsListResponse;
};

export type ContactFilterResponse = ContactFilterResponses[keyof ContactFilterResponses];

export type ContactInboxCreationData = {
    body: {
        /**
         * The ID of the inbox
         */
        inbox_id: number;
        /**
         * Contact Inbox Source Id
         */
        source_id?: string;
    };
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * ID of the contact
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/contacts/{id}/contact_inboxes';
};

export type ContactInboxCreationErrors = {
    /**
     * Authentication error
     */
    401: BadRequestError;
    /**
     * Incorrect payload
     */
    422: BadRequestError;
};

export type ContactInboxCreationError = ContactInboxCreationErrors[keyof ContactInboxCreationErrors];

export type ContactInboxCreationResponses = {
    /**
     * Success
     */
    200: ContactInboxes;
};

export type ContactInboxCreationResponse = ContactInboxCreationResponses[keyof ContactInboxCreationResponses];

export type ContactableInboxesGetData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * ID of the contact
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/contacts/{id}/contactable_inboxes';
};

export type ContactableInboxesGetErrors = {
    /**
     * Authentication error
     */
    401: BadRequestError;
    /**
     * Incorrect payload
     */
    422: BadRequestError;
};

export type ContactableInboxesGetError = ContactableInboxesGetErrors[keyof ContactableInboxesGetErrors];

export type ContactableInboxesGetResponses = {
    /**
     * Success
     */
    200: ContactableInboxesResponse;
};

export type ContactableInboxesGetResponse = ContactableInboxesGetResponses[keyof ContactableInboxesGetResponses];

export type GetAccountAutomationRuleData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: {
        /**
         * The page parameter
         */
        page?: number;
    };
    url: '/api/v1/accounts/{account_id}/automation_rules';
};

export type GetAccountAutomationRuleErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
};

export type GetAccountAutomationRuleError = GetAccountAutomationRuleErrors[keyof GetAccountAutomationRuleErrors];

export type GetAccountAutomationRuleResponses = {
    /**
     * Success
     */
    200: AutomationRule;
};

export type GetAccountAutomationRuleResponse = GetAccountAutomationRuleResponses[keyof GetAccountAutomationRuleResponses];

export type AddNewAutomationRuleToAccountData = {
    body: AutomationRuleCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/automation_rules';
};

export type AddNewAutomationRuleToAccountErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
};

export type AddNewAutomationRuleToAccountError = AddNewAutomationRuleToAccountErrors[keyof AddNewAutomationRuleToAccountErrors];

export type AddNewAutomationRuleToAccountResponses = {
    /**
     * Success
     */
    200: AutomationRule;
};

export type AddNewAutomationRuleToAccountResponse = AddNewAutomationRuleToAccountResponses[keyof AddNewAutomationRuleToAccountResponses];

export type DeleteAutomationRuleFromAccountData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the automation rule to be deleted
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/automation_rules/{id}';
};

export type DeleteAutomationRuleFromAccountErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * automation rule not found
     */
    404: BadRequestError;
};

export type DeleteAutomationRuleFromAccountError = DeleteAutomationRuleFromAccountErrors[keyof DeleteAutomationRuleFromAccountErrors];

export type DeleteAutomationRuleFromAccountResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetDetailsOfASingleAutomationRuleData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the automation rule to be updated.
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/automation_rules/{id}';
};

export type GetDetailsOfASingleAutomationRuleErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The given rule ID does not exist in the account
     */
    404: BadRequestError;
};

export type GetDetailsOfASingleAutomationRuleError = GetDetailsOfASingleAutomationRuleErrors[keyof GetDetailsOfASingleAutomationRuleErrors];

export type GetDetailsOfASingleAutomationRuleResponses = {
    /**
     * Success
     */
    200: AutomationRule;
};

export type GetDetailsOfASingleAutomationRuleResponse = GetDetailsOfASingleAutomationRuleResponses[keyof GetDetailsOfASingleAutomationRuleResponses];

export type UpdateAutomationRuleInAccountData = {
    body: AutomationRuleCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the automation rule to be updated.
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/automation_rules/{id}';
};

export type UpdateAutomationRuleInAccountErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Rule not found
     */
    404: BadRequestError;
};

export type UpdateAutomationRuleInAccountError = UpdateAutomationRuleInAccountErrors[keyof UpdateAutomationRuleInAccountErrors];

export type UpdateAutomationRuleInAccountResponses = {
    /**
     * Success
     */
    200: AutomationRule;
};

export type UpdateAutomationRuleInAccountResponse = UpdateAutomationRuleInAccountResponses[keyof UpdateAutomationRuleInAccountResponses];

export type GetPortalData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/portals';
};

export type GetPortalErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
};

export type GetPortalError = GetPortalErrors[keyof GetPortalErrors];

export type GetPortalResponses = {
    /**
     * Success
     */
    200: Portal;
};

export type GetPortalResponse = GetPortalResponses[keyof GetPortalResponses];

export type AddNewPortalToAccountData = {
    body: PortalCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/portals';
};

export type AddNewPortalToAccountErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
};

export type AddNewPortalToAccountError = AddNewPortalToAccountErrors[keyof AddNewPortalToAccountErrors];

export type AddNewPortalToAccountResponses = {
    /**
     * Success
     */
    200: Portal;
};

export type AddNewPortalToAccountResponse = AddNewPortalToAccountResponses[keyof AddNewPortalToAccountResponses];

export type UpdatePortalToAccountData = {
    body: PortalCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The slug identifier of the portal
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/portals/{id}';
};

export type UpdatePortalToAccountErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Portal not found
     */
    404: BadRequestError;
};

export type UpdatePortalToAccountError = UpdatePortalToAccountErrors[keyof UpdatePortalToAccountErrors];

export type UpdatePortalToAccountResponses = {
    /**
     * Success
     */
    200: PortalSingle;
};

export type UpdatePortalToAccountResponse = UpdatePortalToAccountResponses[keyof UpdatePortalToAccountResponses];

export type AddNewCategoryToAccountData = {
    body: CategoryCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The slug identifier of the portal
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/portals/{id}/categories';
};

export type AddNewCategoryToAccountErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
};

export type AddNewCategoryToAccountError = AddNewCategoryToAccountErrors[keyof AddNewCategoryToAccountErrors];

export type AddNewCategoryToAccountResponses = {
    /**
     * Success
     */
    200: Category;
};

export type AddNewCategoryToAccountResponse = AddNewCategoryToAccountResponses[keyof AddNewCategoryToAccountResponses];

export type AddNewArticleToAccountData = {
    body: ArticleCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The slug identifier of the portal
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/portals/{id}/articles';
};

export type AddNewArticleToAccountErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
};

export type AddNewArticleToAccountError = AddNewArticleToAccountErrors[keyof AddNewArticleToAccountErrors];

export type AddNewArticleToAccountResponses = {
    /**
     * Success
     */
    200: Article;
};

export type AddNewArticleToAccountResponse = AddNewArticleToAccountResponses[keyof AddNewArticleToAccountResponses];

export type ConversationListMetaData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: {
        /**
         * Filter by conversation status.
         */
        status?: 'all' | 'open' | 'resolved' | 'pending' | 'snoozed';
        /**
         * Filters conversations with messages containing the search term
         */
        q?: string;
        inbox_id?: number;
        team_id?: number;
        labels?: Array<string>;
    };
    url: '/api/v1/accounts/{account_id}/conversations/meta';
};

export type ConversationListMetaErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestError;
};

export type ConversationListMetaError = ConversationListMetaErrors[keyof ConversationListMetaErrors];

export type ConversationListMetaResponses = {
    /**
     * Success
     */
    200: {
        meta?: {
            mine_count?: number;
            unassigned_count?: number;
            assigned_count?: number;
            all_count?: number;
        };
    };
};

export type ConversationListMetaResponse = ConversationListMetaResponses[keyof ConversationListMetaResponses];

export type ConversationListData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: {
        /**
         * Filter conversations by assignee type.
         */
        assignee_type?: 'me' | 'unassigned' | 'all' | 'assigned';
        /**
         * Filter by conversation status.
         */
        status?: 'all' | 'open' | 'resolved' | 'pending' | 'snoozed';
        /**
         * Filters conversations with messages containing the search term
         */
        q?: string;
        inbox_id?: number;
        team_id?: number;
        labels?: Array<string>;
        /**
         * paginate through conversations
         */
        page?: number;
    };
    url: '/api/v1/accounts/{account_id}/conversations';
};

export type ConversationListErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestError;
};

export type ConversationListError = ConversationListErrors[keyof ConversationListErrors];

export type ConversationListResponses = {
    /**
     * Success
     */
    200: ConversationList;
};

export type ConversationListResponse = ConversationListResponses[keyof ConversationListResponses];

export type NewConversationData = {
    body: ConversationCreatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/conversations';
};

export type NewConversationErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
};

export type NewConversationError = NewConversationErrors[keyof NewConversationErrors];

export type NewConversationResponses = {
    /**
     * Success
     */
    200: {
        /**
         * ID of the conversation
         */
        id?: number;
        /**
         * Account Id
         */
        account_id?: number;
        /**
         * ID of the inbox
         */
        inbox_id?: number;
    };
};

export type NewConversationResponse = NewConversationResponses[keyof NewConversationResponses];

export type ConversationFilterData = {
    body: {
        payload?: Array<{
            /**
             * filter attribute name
             */
            attribute_key?: string;
            /**
             * filter operator name
             */
            filter_operator?: 'equal_to' | 'not_equal_to' | 'contains' | 'does_not_contain';
            /**
             * array of the attribute values to filter
             */
            values?: Array<string>;
            /**
             * query operator name
             */
            query_operator?: 'AND' | 'OR';
        }>;
    };
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: {
        page?: number;
    };
    url: '/api/v1/accounts/{account_id}/conversations/filter';
};

export type ConversationFilterErrors = {
    /**
     * Bad Request Error
     */
    400: BadRequestError;
};

export type ConversationFilterError = ConversationFilterErrors[keyof ConversationFilterErrors];

export type ConversationFilterResponses = {
    /**
     * Success
     */
    200: ConversationList;
};

export type ConversationFilterResponse = ConversationFilterResponses[keyof ConversationFilterResponses];

export type GetDetailsOfAConversationData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}';
};

export type GetDetailsOfAConversationErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Conversation not found
     */
    404: BadRequestError;
};

export type GetDetailsOfAConversationError = GetDetailsOfAConversationErrors[keyof GetDetailsOfAConversationErrors];

export type GetDetailsOfAConversationResponses = {
    /**
     * Success
     */
    200: ConversationShow;
};

export type GetDetailsOfAConversationResponse = GetDetailsOfAConversationResponses[keyof GetDetailsOfAConversationResponses];

export type UpdateConversationData = {
    body: {
        /**
         * The priority of the conversation
         */
        priority?: 'urgent' | 'high' | 'medium' | 'low' | 'none';
        /**
         * The ID of the SLA policy (Available only in Enterprise edition)
         */
        sla_policy_id?: number;
    };
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}';
};

export type UpdateConversationErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * Conversation not found
     */
    404: BadRequestError;
};

export type UpdateConversationError = UpdateConversationErrors[keyof UpdateConversationErrors];

export type UpdateConversationResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type ToggleStatusOfAConversationData = {
    body: {
        /**
         * The status of the conversation
         */
        status: 'open' | 'resolved' | 'pending' | 'snoozed';
        /**
         * When status is `snoozed`, schedule the reopen time as a Unix timestamp in seconds. If not provided, the conversation is snoozed until the next customer reply. The conversation always reopens when the customer replies.
         */
        snoozed_until?: number;
    };
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/toggle_status';
};

export type ToggleStatusOfAConversationErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * Conversation not found
     */
    404: BadRequestError;
};

export type ToggleStatusOfAConversationError = ToggleStatusOfAConversationErrors[keyof ToggleStatusOfAConversationErrors];

export type ToggleStatusOfAConversationResponses = {
    /**
     * Success
     */
    200: {
        meta?: {
            [key: string]: unknown;
        };
        payload?: {
            success?: boolean;
            current_status?: 'open' | 'resolved' | 'pending' | 'snoozed';
            conversation_id?: number;
        };
    };
};

export type ToggleStatusOfAConversationResponse = ToggleStatusOfAConversationResponses[keyof ToggleStatusOfAConversationResponses];

export type TogglePriorityOfAConversationData = {
    body: {
        /**
         * The priority of the conversation
         */
        priority: 'urgent' | 'high' | 'medium' | 'low' | 'none';
    };
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/toggle_priority';
};

export type TogglePriorityOfAConversationErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * Conversation not found
     */
    404: BadRequestError;
};

export type TogglePriorityOfAConversationError = TogglePriorityOfAConversationErrors[keyof TogglePriorityOfAConversationErrors];

export type TogglePriorityOfAConversationResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type UpdateCustomAttributesOfAConversationData = {
    body: {
        /**
         * The custom attributes to be set for the conversation
         */
        custom_attributes: {
            [key: string]: unknown;
        };
    };
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/custom_attributes';
};

export type UpdateCustomAttributesOfAConversationErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * Conversation not found
     */
    404: BadRequestError;
};

export type UpdateCustomAttributesOfAConversationError = UpdateCustomAttributesOfAConversationErrors[keyof UpdateCustomAttributesOfAConversationErrors];

export type UpdateCustomAttributesOfAConversationResponses = {
    /**
     * Success
     */
    200: {
        /**
         * The custom attributes of the conversation
         */
        custom_attributes?: {
            [key: string]: unknown;
        };
    };
};

export type UpdateCustomAttributesOfAConversationResponse = UpdateCustomAttributesOfAConversationResponses[keyof UpdateCustomAttributesOfAConversationResponses];

export type AssignAConversationData = {
    body: {
        /**
         * Id of the assignee user
         */
        assignee_id?: number;
        /**
         * Id of the team. If the assignee_id is present, this param would be ignored
         */
        team_id?: number;
    };
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/assignments';
};

export type AssignAConversationErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * Conversation not found
     */
    404: BadRequestError;
};

export type AssignAConversationError = AssignAConversationErrors[keyof AssignAConversationErrors];

export type AssignAConversationResponses = {
    /**
     * Success
     */
    200: User;
};

export type AssignAConversationResponse = AssignAConversationResponses[keyof AssignAConversationResponses];

export type ListAllLabelsOfAConversationData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/labels';
};

export type ListAllLabelsOfAConversationErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * Conversation not found
     */
    404: BadRequestError;
};

export type ListAllLabelsOfAConversationError = ListAllLabelsOfAConversationErrors[keyof ListAllLabelsOfAConversationErrors];

export type ListAllLabelsOfAConversationResponses = {
    /**
     * Success
     */
    200: ConversationLabels;
};

export type ListAllLabelsOfAConversationResponse = ListAllLabelsOfAConversationResponses[keyof ListAllLabelsOfAConversationResponses];

export type ConversationAddLabelsData = {
    body: {
        /**
         * Array of labels (comma-separated strings)
         */
        labels: Array<string>;
    };
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/labels';
};

export type ConversationAddLabelsErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * Conversation not found
     */
    404: BadRequestError;
};

export type ConversationAddLabelsError = ConversationAddLabelsErrors[keyof ConversationAddLabelsErrors];

export type ConversationAddLabelsResponses = {
    /**
     * Success
     */
    200: ConversationLabels;
};

export type ConversationAddLabelsResponse = ConversationAddLabelsResponses[keyof ConversationAddLabelsResponses];

export type ListAllInboxesData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/inboxes';
};

export type ListAllInboxesErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Inbox not found
     */
    404: BadRequestError;
};

export type ListAllInboxesError = ListAllInboxesErrors[keyof ListAllInboxesErrors];

export type ListAllInboxesResponses = {
    /**
     * Success
     */
    200: {
        /**
         * Array of inboxes
         */
        payload?: Array<Inbox>;
    };
};

export type ListAllInboxesResponse = ListAllInboxesResponses[keyof ListAllInboxesResponses];

export type GetInboxData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * ID of the inbox
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/inboxes/{id}/';
};

export type GetInboxErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Inbox not found
     */
    404: BadRequestError;
};

export type GetInboxError = GetInboxErrors[keyof GetInboxErrors];

export type GetInboxResponses = {
    /**
     * Success
     */
    200: Inbox;
};

export type GetInboxResponse = GetInboxResponses[keyof GetInboxResponses];

export type InboxCreationData = {
    body: InboxCreatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/inboxes/';
};

export type InboxCreationErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Inbox not found
     */
    404: BadRequestError;
};

export type InboxCreationError = InboxCreationErrors[keyof InboxCreationErrors];

export type InboxCreationResponses = {
    /**
     * Success
     */
    200: Inbox;
};

export type InboxCreationResponse = InboxCreationResponses[keyof InboxCreationResponses];

export type UpdateInboxData = {
    body: InboxUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * ID of the inbox
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/inboxes/{id}';
};

export type UpdateInboxErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Inbox not found
     */
    404: BadRequestError;
};

export type UpdateInboxError = UpdateInboxErrors[keyof UpdateInboxErrors];

export type UpdateInboxResponses = {
    /**
     * Success
     */
    200: Inbox;
};

export type UpdateInboxResponse = UpdateInboxResponses[keyof UpdateInboxResponses];

export type GetInboxAgentBotData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * ID of the inbox
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/inboxes/{id}/agent_bot';
};

export type GetInboxAgentBotErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Inbox not found, Agent bot not found
     */
    404: BadRequestError;
};

export type GetInboxAgentBotError = GetInboxAgentBotErrors[keyof GetInboxAgentBotErrors];

export type GetInboxAgentBotResponses = {
    /**
     * Success
     */
    204: AgentBot;
};

export type GetInboxAgentBotResponse = GetInboxAgentBotResponses[keyof GetInboxAgentBotResponses];

export type UpdateAgentBotData = {
    body: {
        /**
         * Agent bot ID
         */
        agent_bot: number;
    };
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * ID of the inbox
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/inboxes/{id}/set_agent_bot';
};

export type UpdateAgentBotErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Inbox not found, Agent bot not found
     */
    404: BadRequestError;
};

export type UpdateAgentBotError = UpdateAgentBotErrors[keyof UpdateAgentBotErrors];

export type UpdateAgentBotResponses = {
    /**
     * Success
     */
    204: void;
};

export type UpdateAgentBotResponse = UpdateAgentBotResponses[keyof UpdateAgentBotResponses];

export type GetInboxMembersData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the Inbox
         */
        inbox_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/inbox_members/{inbox_id}';
};

export type GetInboxMembersErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Inbox not found
     */
    404: BadRequestError;
};

export type GetInboxMembersError = GetInboxMembersErrors[keyof GetInboxMembersErrors];

export type GetInboxMembersResponses = {
    /**
     * Success
     */
    200: {
        /**
         * Array of all active agents
         */
        payload?: Array<Agent>;
    };
};

export type GetInboxMembersResponse = GetInboxMembersResponses[keyof GetInboxMembersResponses];

export type DeleteAgentInInboxData = {
    body: {
        /**
         * The ID of the inbox
         */
        inbox_id: string;
        /**
         * IDs of users to be deleted from the inbox
         */
        user_ids: Array<number>;
    };
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/inbox_members';
};

export type DeleteAgentInInboxErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Inbox not found
     */
    404: BadRequestError;
    /**
     * User must exist
     */
    422: BadRequestError;
};

export type DeleteAgentInInboxError = DeleteAgentInInboxErrors[keyof DeleteAgentInInboxErrors];

export type DeleteAgentInInboxResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type UpdateAgentsInInboxData = {
    body: {
        /**
         * The ID of the inbox
         */
        inbox_id: string;
        /**
         * IDs of users to be added to the inbox
         */
        user_ids: Array<number>;
    };
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/inbox_members';
};

export type UpdateAgentsInInboxErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Inbox not found
     */
    404: BadRequestError;
    /**
     * User must exist
     */
    422: BadRequestError;
};

export type UpdateAgentsInInboxError = UpdateAgentsInInboxErrors[keyof UpdateAgentsInInboxErrors];

export type UpdateAgentsInInboxResponses = {
    /**
     * Success
     */
    200: {
        /**
         * Array of all active agents
         */
        payload?: Array<Agent>;
    };
};

export type UpdateAgentsInInboxResponse = UpdateAgentsInInboxResponses[keyof UpdateAgentsInInboxResponses];

export type AddNewAgentToInboxData = {
    body: {
        /**
         * The ID of the inbox
         */
        inbox_id: number;
        /**
         * IDs of users to be added to the inbox
         */
        user_ids: Array<number>;
    };
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/inbox_members';
};

export type AddNewAgentToInboxErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Inbox not found
     */
    404: BadRequestError;
    /**
     * User must exist
     */
    422: BadRequestError;
};

export type AddNewAgentToInboxError = AddNewAgentToInboxErrors[keyof AddNewAgentToInboxErrors];

export type AddNewAgentToInboxResponses = {
    /**
     * Success
     */
    200: {
        /**
         * Array of all active agents
         */
        payload?: Array<Agent>;
    };
};

export type AddNewAgentToInboxResponse = AddNewAgentToInboxResponses[keyof AddNewAgentToInboxResponses];

export type ListAllMessagesData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/messages';
};

export type ListAllMessagesErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * Conversation not found
     */
    404: BadRequestError;
};

export type ListAllMessagesError = ListAllMessagesErrors[keyof ListAllMessagesErrors];

export type ListAllMessagesResponses = {
    /**
     * Success
     */
    200: {
        meta?: {
            labels?: Array<string>;
            additional_attributes?: {
                [key: string]: unknown;
            };
            contact?: Contact;
            assignee?: Agent;
            agent_last_seen_at?: string;
            assignee_last_seen_at?: string;
        };
        /**
         * Array of messages
         */
        payload?: Array<Message>;
    };
};

export type ListAllMessagesResponse = ListAllMessagesResponses[keyof ListAllMessagesResponses];

export type CreateANewMessageInAConversationData = {
    body: ConversationMessageCreatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/messages';
};

export type CreateANewMessageInAConversationErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Conversation not found
     */
    404: BadRequestError;
};

export type CreateANewMessageInAConversationError = CreateANewMessageInAConversationErrors[keyof CreateANewMessageInAConversationErrors];

export type CreateANewMessageInAConversationResponses = {
    /**
     * Success
     */
    200: GenericId & Message;
};

export type CreateANewMessageInAConversationResponse = CreateANewMessageInAConversationResponses[keyof CreateANewMessageInAConversationResponses];

export type DeleteAMessageData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the conversation
         */
        conversation_id: number;
        /**
         * The numeric ID of the message
         */
        message_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/messages/{message_id}';
};

export type DeleteAMessageErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The message or conversation does not exist in the account
     */
    404: BadRequestError;
};

export type DeleteAMessageError = DeleteAMessageErrors[keyof DeleteAMessageErrors];

export type DeleteAMessageResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetDetailsOfAllIntegrationsData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/integrations/apps';
};

export type GetDetailsOfAllIntegrationsErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * Url not found
     */
    404: BadRequestError;
};

export type GetDetailsOfAllIntegrationsError = GetDetailsOfAllIntegrationsErrors[keyof GetDetailsOfAllIntegrationsErrors];

export type GetDetailsOfAllIntegrationsResponses = {
    /**
     * Success
     */
    200: {
        /**
         * Array of Integration apps
         */
        payload?: Array<IntegrationsApp>;
    };
};

export type GetDetailsOfAllIntegrationsResponse = GetDetailsOfAllIntegrationsResponses[keyof GetDetailsOfAllIntegrationsResponses];

export type CreateAnIntegrationHookData = {
    body: IntegrationsHookCreatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/integrations/hooks';
};

export type CreateAnIntegrationHookErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type CreateAnIntegrationHookError = CreateAnIntegrationHookErrors[keyof CreateAnIntegrationHookErrors];

export type CreateAnIntegrationHookResponses = {
    /**
     * Success
     */
    200: IntegrationsHook;
};

export type CreateAnIntegrationHookResponse = CreateAnIntegrationHookResponses[keyof CreateAnIntegrationHookResponses];

export type DeleteAnIntegrationHookData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the integration hook
         */
        hook_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/integrations/hooks/{hook_id}';
};

export type DeleteAnIntegrationHookErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The hook does not exist in the account
     */
    404: BadRequestError;
};

export type DeleteAnIntegrationHookError = DeleteAnIntegrationHookErrors[keyof DeleteAnIntegrationHookErrors];

export type DeleteAnIntegrationHookResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type UpdateAnIntegrationsHookData = {
    body: IntegrationsHookUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the integration hook
         */
        hook_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/integrations/hooks/{hook_id}';
};

export type UpdateAnIntegrationsHookErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type UpdateAnIntegrationsHookError = UpdateAnIntegrationsHookErrors[keyof UpdateAnIntegrationsHookErrors];

export type UpdateAnIntegrationsHookResponses = {
    /**
     * Success
     */
    200: IntegrationsHook;
};

export type UpdateAnIntegrationsHookResponse = UpdateAnIntegrationsHookResponses[keyof UpdateAnIntegrationsHookResponses];

export type FetchProfileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/profile';
};

export type FetchProfileErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type FetchProfileError = FetchProfileErrors[keyof FetchProfileErrors];

export type FetchProfileResponses = {
    /**
     * Success
     */
    200: User;
};

export type FetchProfileResponse = FetchProfileResponses[keyof FetchProfileResponses];

export type ListAllTeamsData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/teams';
};

export type ListAllTeamsErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type ListAllTeamsError = ListAllTeamsErrors[keyof ListAllTeamsErrors];

export type ListAllTeamsResponses = {
    /**
     * Array of teams
     */
    200: Array<Team>;
};

export type ListAllTeamsResponse = ListAllTeamsResponses[keyof ListAllTeamsResponses];

export type CreateATeamData = {
    body: TeamCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/teams';
};

export type CreateATeamErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type CreateATeamError = CreateATeamErrors[keyof CreateATeamErrors];

export type CreateATeamResponses = {
    /**
     * Success
     */
    200: Team;
};

export type CreateATeamResponse = CreateATeamResponses[keyof CreateATeamResponses];

export type DeleteATeamData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the team to be updated
         */
        team_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/teams/{team_id}';
};

export type DeleteATeamErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The team does not exist in the account
     */
    404: BadRequestError;
};

export type DeleteATeamError = DeleteATeamErrors[keyof DeleteATeamErrors];

export type DeleteATeamResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetDetailsOfASingleTeamData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the team to be updated
         */
        team_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/teams/{team_id}';
};

export type GetDetailsOfASingleTeamErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The given team ID does not exist in the account
     */
    404: BadRequestError;
};

export type GetDetailsOfASingleTeamError = GetDetailsOfASingleTeamErrors[keyof GetDetailsOfASingleTeamErrors];

export type GetDetailsOfASingleTeamResponses = {
    /**
     * Success
     */
    200: Team;
};

export type GetDetailsOfASingleTeamResponse = GetDetailsOfASingleTeamResponses[keyof GetDetailsOfASingleTeamResponses];

export type UpdateATeamData = {
    body: TeamCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the team to be updated
         */
        team_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/teams/{team_id}';
};

export type UpdateATeamErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type UpdateATeamError = UpdateATeamErrors[keyof UpdateATeamErrors];

export type UpdateATeamResponses = {
    /**
     * Success
     */
    200: Team;
};

export type UpdateATeamResponse = UpdateATeamResponses[keyof UpdateATeamResponses];

export type DeleteAgentInTeamData = {
    body: {
        /**
         * IDs of users to be deleted from the team
         */
        user_ids: Array<number>;
    };
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the team to be updated
         */
        team_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/teams/{team_id}/team_members';
};

export type DeleteAgentInTeamErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Team not found
     */
    404: BadRequestError;
    /**
     * User must exist
     */
    422: BadRequestError;
};

export type DeleteAgentInTeamError = DeleteAgentInTeamErrors[keyof DeleteAgentInTeamErrors];

export type DeleteAgentInTeamResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetTeamMembersData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the team to be updated
         */
        team_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/teams/{team_id}/team_members';
};

export type GetTeamMembersErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Team not found
     */
    404: BadRequestError;
};

export type GetTeamMembersError = GetTeamMembersErrors[keyof GetTeamMembersErrors];

export type GetTeamMembersResponses = {
    /**
     * Array of all agents in the team
     */
    200: Array<Agent>;
};

export type GetTeamMembersResponse = GetTeamMembersResponses[keyof GetTeamMembersResponses];

export type UpdateAgentsInTeamData = {
    body: {
        /**
         * IDs of users to be added to the team
         */
        user_ids: Array<number>;
    };
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the team to be updated
         */
        team_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/teams/{team_id}/team_members';
};

export type UpdateAgentsInTeamErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Team not found
     */
    404: BadRequestError;
    /**
     * User must exist
     */
    422: BadRequestError;
};

export type UpdateAgentsInTeamError = UpdateAgentsInTeamErrors[keyof UpdateAgentsInTeamErrors];

export type UpdateAgentsInTeamResponses = {
    /**
     * Array of all agents in the team
     */
    200: Array<Agent>;
};

export type UpdateAgentsInTeamResponse = UpdateAgentsInTeamResponses[keyof UpdateAgentsInTeamResponses];

export type AddNewAgentToTeamData = {
    body: {
        /**
         * IDs of users to be added to the team
         */
        user_ids: Array<number>;
    };
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The ID of the team to be updated
         */
        team_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/teams/{team_id}/team_members';
};

export type AddNewAgentToTeamErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * Team not found
     */
    404: BadRequestError;
    /**
     * User must exist
     */
    422: BadRequestError;
};

export type AddNewAgentToTeamError = AddNewAgentToTeamErrors[keyof AddNewAgentToTeamErrors];

export type AddNewAgentToTeamResponses = {
    /**
     * Array of all active agents
     */
    200: Array<Agent>;
};

export type AddNewAgentToTeamResponse = AddNewAgentToTeamResponses[keyof AddNewAgentToTeamResponses];

export type ListAllFiltersData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: {
        /**
         * The type of custom filter
         */
        filter_type?: 'conversation' | 'contact' | 'report';
    };
    url: '/api/v1/accounts/{account_id}/custom_filters';
};

export type ListAllFiltersErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type ListAllFiltersError = ListAllFiltersErrors[keyof ListAllFiltersErrors];

export type ListAllFiltersResponses = {
    /**
     * Array of custom filters
     */
    200: Array<CustomFilter>;
};

export type ListAllFiltersResponse = ListAllFiltersResponses[keyof ListAllFiltersResponses];

export type CreateACustomFilterData = {
    body: CustomFilterCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: {
        /**
         * The type of custom filter
         */
        filter_type?: 'conversation' | 'contact' | 'report';
    };
    url: '/api/v1/accounts/{account_id}/custom_filters';
};

export type CreateACustomFilterErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type CreateACustomFilterError = CreateACustomFilterErrors[keyof CreateACustomFilterErrors];

export type CreateACustomFilterResponses = {
    /**
     * Success
     */
    200: CustomFilter;
};

export type CreateACustomFilterResponse = CreateACustomFilterResponses[keyof CreateACustomFilterResponses];

export type DeleteACustomFilterData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the custom filter
         */
        custom_filter_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/custom_filters/{custom_filter_id}';
};

export type DeleteACustomFilterErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The custom filter does not exist in the account
     */
    404: BadRequestError;
};

export type DeleteACustomFilterError = DeleteACustomFilterErrors[keyof DeleteACustomFilterErrors];

export type DeleteACustomFilterResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetDetailsOfASingleCustomFilterData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the custom filter
         */
        custom_filter_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/custom_filters/{custom_filter_id}';
};

export type GetDetailsOfASingleCustomFilterErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
    /**
     * The given team ID does not exist in the account
     */
    404: BadRequestError;
};

export type GetDetailsOfASingleCustomFilterError = GetDetailsOfASingleCustomFilterErrors[keyof GetDetailsOfASingleCustomFilterErrors];

export type GetDetailsOfASingleCustomFilterResponses = {
    /**
     * Success
     */
    200: CustomFilter;
};

export type GetDetailsOfASingleCustomFilterResponse = GetDetailsOfASingleCustomFilterResponses[keyof GetDetailsOfASingleCustomFilterResponses];

export type UpdateACustomFilterData = {
    body: CustomFilterCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the custom filter
         */
        custom_filter_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/custom_filters/{custom_filter_id}';
};

export type UpdateACustomFilterErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type UpdateACustomFilterError = UpdateACustomFilterErrors[keyof UpdateACustomFilterErrors];

export type UpdateACustomFilterResponses = {
    /**
     * Success
     */
    200: CustomFilter;
};

export type UpdateACustomFilterResponse = UpdateACustomFilterResponses[keyof UpdateACustomFilterResponses];

export type ListAllWebhooksData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/webhooks';
};

export type ListAllWebhooksErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type ListAllWebhooksError = ListAllWebhooksErrors[keyof ListAllWebhooksErrors];

export type ListAllWebhooksResponses = {
    /**
     * Array of webhook objects
     */
    200: Array<Webhook>;
};

export type ListAllWebhooksResponse = ListAllWebhooksResponses[keyof ListAllWebhooksResponses];

export type CreateAWebhookData = {
    body: WebhookCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/webhooks';
};

export type CreateAWebhookErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type CreateAWebhookError = CreateAWebhookErrors[keyof CreateAWebhookErrors];

export type CreateAWebhookResponses = {
    /**
     * Success
     */
    200: Webhook;
};

export type CreateAWebhookResponse = CreateAWebhookResponses[keyof CreateAWebhookResponses];

export type DeleteAWebhookData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the webhook
         */
        webhook_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/webhooks/{webhook_id}';
};

export type DeleteAWebhookErrors = {
    /**
     * Unauthorized
     */
    401: {
        [key: string]: unknown;
    };
    /**
     * The webhook does not exist in the account
     */
    404: BadRequestError;
};

export type DeleteAWebhookError = DeleteAWebhookErrors[keyof DeleteAWebhookErrors];

export type DeleteAWebhookResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type UpdateAWebhookData = {
    body: WebhookCreateUpdatePayload;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * The numeric ID of the webhook
         */
        webhook_id: number;
    };
    query?: never;
    url: '/api/v1/accounts/{account_id}/webhooks/{webhook_id}';
};

export type UpdateAWebhookErrors = {
    /**
     * Unauthorized
     */
    401: BadRequestError;
};

export type UpdateAWebhookError = UpdateAWebhookErrors[keyof UpdateAWebhookErrors];

export type UpdateAWebhookResponses = {
    /**
     * Success
     */
    200: Webhook;
};

export type UpdateAWebhookResponse = UpdateAWebhookResponses[keyof UpdateAWebhookResponses];

export type ListAllConversationStatisticsData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query: {
        /**
         * The type of metric
         */
        metric: 'conversations_count' | 'incoming_messages_count' | 'outgoing_messages_count' | 'avg_first_response_time' | 'avg_resolution_time' | 'resolutions_count';
        /**
         * Type of report
         */
        type: 'account' | 'agent' | 'inbox' | 'label' | 'team';
        /**
         * The Id of specific object in case of agent/inbox/label
         */
        id?: string;
        /**
         * The timestamp from where report should start.
         */
        since?: string;
        /**
         * The timestamp from where report should stop.
         */
        until?: string;
    };
    url: '/api/v2/accounts/{account_id}/reports';
};

export type ListAllConversationStatisticsErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * reports not found
     */
    404: BadRequestError;
};

export type ListAllConversationStatisticsError = ListAllConversationStatisticsErrors[keyof ListAllConversationStatisticsErrors];

export type ListAllConversationStatisticsResponses = {
    /**
     * Array of date based conversation statistics
     */
    200: Array<{
        value?: string;
        timestamp?: number;
    }>;
};

export type ListAllConversationStatisticsResponse = ListAllConversationStatisticsResponses[keyof ListAllConversationStatisticsResponses];

export type ListAllConversationStatisticsSummaryData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query: {
        /**
         * Type of report
         */
        type: 'account' | 'agent' | 'inbox' | 'label' | 'team';
        /**
         * The Id of specific object in case of agent/inbox/label
         */
        id?: string;
        /**
         * The timestamp from where report should start.
         */
        since?: string;
        /**
         * The timestamp from where report should stop.
         */
        until?: string;
    };
    url: '/api/v2/accounts/{account_id}/reports/summary';
};

export type ListAllConversationStatisticsSummaryErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * reports not found
     */
    404: BadRequestError;
};

export type ListAllConversationStatisticsSummaryError = ListAllConversationStatisticsSummaryErrors[keyof ListAllConversationStatisticsSummaryErrors];

export type ListAllConversationStatisticsSummaryResponses = {
    /**
     * Success
     */
    200: AccountSummary;
};

export type ListAllConversationStatisticsSummaryResponse = ListAllConversationStatisticsSummaryResponses[keyof ListAllConversationStatisticsSummaryResponses];

export type GetAccountConversationMetricsData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query: {
        /**
         * Type of report
         */
        type: 'account';
    };
    url: '/api/v2/accounts/{account_id}/reports/conversations';
};

export type GetAccountConversationMetricsErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * reports not found
     */
    404: BadRequestError;
};

export type GetAccountConversationMetricsError = GetAccountConversationMetricsErrors[keyof GetAccountConversationMetricsErrors];

export type GetAccountConversationMetricsResponses = {
    /**
     * Object of account conversation metrics
     */
    200: {
        open?: number;
        unattended?: number;
        unassigned?: number;
    };
};

export type GetAccountConversationMetricsResponse = GetAccountConversationMetricsResponses[keyof GetAccountConversationMetricsResponses];

export type GetAgentConversationMetricsData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
    };
    query: {
        /**
         * Type of report
         */
        type: 'agent';
        /**
         * The numeric ID of the user
         */
        user_id?: string;
    };
    url: '/api/v2/accounts/{account_id}/reports/conversations/';
};

export type GetAgentConversationMetricsErrors = {
    /**
     * Access denied
     */
    403: BadRequestError;
    /**
     * reports not found
     */
    404: BadRequestError;
};

export type GetAgentConversationMetricsError = GetAgentConversationMetricsErrors[keyof GetAgentConversationMetricsErrors];

export type GetAgentConversationMetricsResponses = {
    /**
     * Array of agent based conversation metrics
     */
    200: Array<AgentConversationMetrics>;
};

export type GetAgentConversationMetricsResponse = GetAgentConversationMetricsResponses[keyof GetAgentConversationMetricsResponses];

export type GetConversationMessagesData = {
    body?: never;
    path: {
        /**
         * The numeric ID of the account
         */
        account_id: number;
        /**
         * ID of the conversation
         */
        conversation_id: number;
    };
    query?: never;
    url: '/accounts/{account_id}/conversations/{conversation_id}/messages';
};

export type GetConversationMessagesResponses = {
    /**
     * Success
     */
    200: ConversationMessages;
};

export type GetConversationMessagesResponse = GetConversationMessagesResponses[keyof GetConversationMessagesResponses];
