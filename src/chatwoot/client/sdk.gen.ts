// This file is auto-generated by @hey-api/openapi-ts

import { client } from './client.gen.js';
import type { Client, Options as Options2, TDataShape } from './client/index.js';
import type { AddNewAgentToAccountData, AddNewAgentToAccountErrors, AddNewAgentToAccountResponses, AddNewAgentToInboxData, AddNewAgentToInboxErrors, AddNewAgentToInboxResponses, AddNewAgentToTeamData, AddNewAgentToTeamErrors, AddNewAgentToTeamResponses, AddNewArticleToAccountData, AddNewArticleToAccountErrors, AddNewArticleToAccountResponses, AddNewAutomationRuleToAccountData, AddNewAutomationRuleToAccountErrors, AddNewAutomationRuleToAccountResponses, AddNewCannedResponseToAccountData, AddNewCannedResponseToAccountErrors, AddNewCannedResponseToAccountResponses, AddNewCategoryToAccountData, AddNewCategoryToAccountErrors, AddNewCategoryToAccountResponses, AddNewCustomAttributeToAccountData, AddNewCustomAttributeToAccountErrors, AddNewCustomAttributeToAccountResponses, AddNewPortalToAccountData, AddNewPortalToAccountErrors, AddNewPortalToAccountResponses, AssignAConversationData, AssignAConversationErrors, AssignAConversationResponses, ContactableInboxesGetData, ContactableInboxesGetErrors, ContactableInboxesGetResponses, ContactAddLabelsData, ContactAddLabelsErrors, ContactAddLabelsResponses, ContactConversationsData, ContactConversationsErrors, ContactConversationsResponses, ContactCreateData, ContactCreateErrors, ContactCreateResponses, ContactDeleteData, ContactDeleteErrors, ContactDeleteResponses, ContactDetailsData, ContactDetailsErrors, ContactDetailsResponses, ContactFilterData, ContactFilterErrors, ContactFilterResponses, ContactInboxCreationData, ContactInboxCreationErrors, ContactInboxCreationResponses, ContactListData, ContactListErrors, ContactListResponses, ContactSearchData, ContactSearchErrors, ContactSearchResponses, ContactUpdateData, ContactUpdateErrors, ContactUpdateResponses, ConversationAddLabelsData, ConversationAddLabelsErrors, ConversationAddLabelsResponses, ConversationFilterData, ConversationFilterErrors, ConversationFilterResponses, ConversationListData, ConversationListErrors, ConversationListMetaData, ConversationListMetaErrors, ConversationListMetaResponses, ConversationListResponses, CreateAContactData, CreateAContactErrors, CreateAContactResponses, CreateAConversationData, CreateAConversationErrors, CreateAConversationResponses, CreateACustomFilterData, CreateACustomFilterErrors, CreateACustomFilterResponses, CreateAMessageData, CreateAMessageErrors, CreateAMessageResponses, CreateAnAccountAgentBotData, CreateAnAccountAgentBotErrors, CreateAnAccountAgentBotResponses, CreateAnAccountData, CreateAnAccountErrors, CreateAnAccountResponses, CreateAnAccountUserData, CreateAnAccountUserErrors, CreateAnAccountUserResponses, CreateAnAgentBotData, CreateAnAgentBotErrors, CreateAnAgentBotResponses, CreateANewMessageInAConversationData, CreateANewMessageInAConversationErrors, CreateANewMessageInAConversationResponses, CreateAnIntegrationHookData, CreateAnIntegrationHookErrors, CreateAnIntegrationHookResponses, CreateATeamData, CreateATeamErrors, CreateATeamResponses, CreateAuserData, CreateAuserErrors, CreateAuserResponses, CreateAWebhookData, CreateAWebhookErrors, CreateAWebhookResponses, DeleteACustomFilterData, DeleteACustomFilterErrors, DeleteACustomFilterResponses, DeleteAgentFromAccountData, DeleteAgentFromAccountErrors, DeleteAgentFromAccountResponses, DeleteAgentInInboxData, DeleteAgentInInboxErrors, DeleteAgentInInboxResponses, DeleteAgentInTeamData, DeleteAgentInTeamErrors, DeleteAgentInTeamResponses, DeleteAMessageData, DeleteAMessageErrors, DeleteAMessageResponses, DeleteAnAccountAgentBotData, DeleteAnAccountAgentBotErrors, DeleteAnAccountAgentBotResponses, DeleteAnAccountData, DeleteAnAccountErrors, DeleteAnAccountResponses, DeleteAnAccountUserData, DeleteAnAccountUserErrors, DeleteAnAccountUserResponses, DeleteAnAgentBotData, DeleteAnAgentBotErrors, DeleteAnAgentBotResponses, DeleteAnIntegrationHookData, DeleteAnIntegrationHookErrors, DeleteAnIntegrationHookResponses, DeleteATeamData, DeleteATeamErrors, DeleteATeamResponses, DeleteAuserData, DeleteAuserErrors, DeleteAuserResponses, DeleteAutomationRuleFromAccountData, DeleteAutomationRuleFromAccountErrors, DeleteAutomationRuleFromAccountResponses, DeleteAWebhookData, DeleteAWebhookErrors, DeleteAWebhookResponses, DeleteCannedResponseFromAccountData, DeleteCannedResponseFromAccountErrors, DeleteCannedResponseFromAccountResponses, DeleteCustomAttributeFromAccountData, DeleteCustomAttributeFromAccountErrors, DeleteCustomAttributeFromAccountResponses, FetchProfileData, FetchProfileErrors, FetchProfileResponses, GetAccountAgentsData, GetAccountAgentsErrors, GetAccountAgentsResponses, GetAccountAuditLogsData, GetAccountAuditLogsErrors, GetAccountAuditLogsResponses, GetAccountAutomationRuleData, GetAccountAutomationRuleErrors, GetAccountAutomationRuleResponses, GetAccountCannedResponseData, GetAccountCannedResponseErrors, GetAccountCannedResponseResponses, GetAccountConversationMetricsData, GetAccountConversationMetricsErrors, GetAccountConversationMetricsResponses, GetAccountCustomAttributeData, GetAccountCustomAttributeErrors, GetAccountCustomAttributeResponses, GetAccountDetailsData, GetAccountDetailsErrors, GetAccountDetailsResponses, GetAgentConversationMetricsData, GetAgentConversationMetricsErrors, GetAgentConversationMetricsResponses, GetConversationMessagesData, GetConversationMessagesResponses, GetCsatSurveyPageData, GetCsatSurveyPageResponses, GetDetailsOfAContactData, GetDetailsOfAContactErrors, GetDetailsOfAContactResponses, GetDetailsOfAConversationData, GetDetailsOfAConversationErrors, GetDetailsOfAConversationResponses, GetDetailsOfAInboxData, GetDetailsOfAInboxErrors, GetDetailsOfAInboxResponses, GetDetailsOfAllIntegrationsData, GetDetailsOfAllIntegrationsErrors, GetDetailsOfAllIntegrationsResponses, GetDetailsOfAnAccountData, GetDetailsOfAnAccountErrors, GetDetailsOfAnAccountResponses, GetDetailsOfASingleAccountAgentBotData, GetDetailsOfASingleAccountAgentBotErrors, GetDetailsOfASingleAccountAgentBotResponses, GetDetailsOfASingleAgentBotData, GetDetailsOfASingleAgentBotErrors, GetDetailsOfASingleAgentBotResponses, GetDetailsOfASingleAutomationRuleData, GetDetailsOfASingleAutomationRuleErrors, GetDetailsOfASingleAutomationRuleResponses, GetDetailsOfASingleCustomAttributeData, GetDetailsOfASingleCustomAttributeErrors, GetDetailsOfASingleCustomAttributeResponses, GetDetailsOfASingleCustomFilterData, GetDetailsOfASingleCustomFilterErrors, GetDetailsOfASingleCustomFilterResponses, GetDetailsOfASingleTeamData, GetDetailsOfASingleTeamErrors, GetDetailsOfASingleTeamResponses, GetDetailsOfAuserData, GetDetailsOfAuserErrors, GetDetailsOfAuserResponses, GetInboxAgentBotData, GetInboxAgentBotErrors, GetInboxAgentBotResponses, GetInboxData, GetInboxErrors, GetInboxMembersData, GetInboxMembersErrors, GetInboxMembersResponses, GetInboxResponses, GetPortalData, GetPortalErrors, GetPortalResponses, GetSingleConversationData, GetSingleConversationErrors, GetSingleConversationResponses, GetSsoUrlOfAuserData, GetSsoUrlOfAuserErrors, GetSsoUrlOfAuserResponses, GetTeamMembersData, GetTeamMembersErrors, GetTeamMembersResponses, InboxCreationData, InboxCreationErrors, InboxCreationResponses, ListAllAccountAgentBotsData, ListAllAccountAgentBotsErrors, ListAllAccountAgentBotsResponses, ListAllAccountUsersData, ListAllAccountUsersErrors, ListAllAccountUsersResponses, ListAllAgentBotsData, ListAllAgentBotsErrors, ListAllAgentBotsResponses, ListAllContactConversationsData, ListAllContactConversationsErrors, ListAllContactConversationsResponses, ListAllConverationMessagesData, ListAllConverationMessagesErrors, ListAllConverationMessagesResponses, ListAllConversationStatisticsData, ListAllConversationStatisticsErrors, ListAllConversationStatisticsResponses, ListAllConversationStatisticsSummaryData, ListAllConversationStatisticsSummaryErrors, ListAllConversationStatisticsSummaryResponses, ListAllFiltersData, ListAllFiltersErrors, ListAllFiltersResponses, ListAllInboxesData, ListAllInboxesErrors, ListAllInboxesResponses, ListAllLabelsOfAContactData, ListAllLabelsOfAContactErrors, ListAllLabelsOfAContactResponses, ListAllLabelsOfAConversationData, ListAllLabelsOfAConversationErrors, ListAllLabelsOfAConversationResponses, ListAllMessagesData, ListAllMessagesErrors, ListAllMessagesResponses, ListAllTeamsData, ListAllTeamsErrors, ListAllTeamsResponses, ListAllWebhooksData, ListAllWebhooksErrors, ListAllWebhooksResponses, NewConversationData, NewConversationErrors, NewConversationResponses, ResolveConversationData, ResolveConversationErrors, ResolveConversationResponses, TogglePriorityOfAConversationData, TogglePriorityOfAConversationErrors, TogglePriorityOfAConversationResponses, ToggleStatusOfAConversationData, ToggleStatusOfAConversationErrors, ToggleStatusOfAConversationResponses, ToggleTypingStatusData, ToggleTypingStatusErrors, ToggleTypingStatusResponses, UpdateAccountData, UpdateAccountErrors, UpdateAccountResponses, UpdateAContactData, UpdateAContactErrors, UpdateAContactResponses, UpdateACustomFilterData, UpdateACustomFilterErrors, UpdateACustomFilterResponses, UpdateAgentBotData, UpdateAgentBotErrors, UpdateAgentBotResponses, UpdateAgentInAccountData, UpdateAgentInAccountErrors, UpdateAgentInAccountResponses, UpdateAgentsInInboxData, UpdateAgentsInInboxErrors, UpdateAgentsInInboxResponses, UpdateAgentsInTeamData, UpdateAgentsInTeamErrors, UpdateAgentsInTeamResponses, UpdateAMessageData, UpdateAMessageErrors, UpdateAMessageResponses, UpdateAnAccountAgentBotData, UpdateAnAccountAgentBotErrors, UpdateAnAccountAgentBotResponses, UpdateAnAccountData, UpdateAnAccountErrors, UpdateAnAccountResponses, UpdateAnAgentBotData, UpdateAnAgentBotErrors, UpdateAnAgentBotResponses, UpdateAnIntegrationsHookData, UpdateAnIntegrationsHookErrors, UpdateAnIntegrationsHookResponses, UpdateATeamData, UpdateATeamErrors, UpdateATeamResponses, UpdateAuserData, UpdateAuserErrors, UpdateAuserResponses, UpdateAutomationRuleInAccountData, UpdateAutomationRuleInAccountErrors, UpdateAutomationRuleInAccountResponses, UpdateAWebhookData, UpdateAWebhookErrors, UpdateAWebhookResponses, UpdateCannedResponseInAccountData, UpdateCannedResponseInAccountErrors, UpdateCannedResponseInAccountResponses, UpdateConversationData, UpdateConversationErrors, UpdateConversationResponses, UpdateCustomAttributeInAccountData, UpdateCustomAttributeInAccountErrors, UpdateCustomAttributeInAccountResponses, UpdateCustomAttributesOfAConversationData, UpdateCustomAttributesOfAConversationErrors, UpdateCustomAttributesOfAConversationResponses, UpdateInboxData, UpdateInboxErrors, UpdateInboxResponses, UpdateLastSeenData, UpdateLastSeenErrors, UpdateLastSeenResponses, UpdatePortalToAccountData, UpdatePortalToAccountErrors, UpdatePortalToAccountResponses } from './types.gen.js';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Create an Account
 *
 * Create an Account
 */
export const createAnAccount = <ThrowOnError extends boolean = false>(options: Options<CreateAnAccountData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAnAccountResponses, CreateAnAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/platform/api/v1/accounts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete an Account
 *
 * Delete an Account
 */
export const deleteAnAccount = <ThrowOnError extends boolean = false>(options: Options<DeleteAnAccountData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAnAccountResponses, DeleteAnAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/platform/api/v1/accounts/{account_id}',
        ...options
    });
};

/**
 * Get an account details
 *
 * Get the details of an account
 */
export const getDetailsOfAnAccount = <ThrowOnError extends boolean = false>(options: Options<GetDetailsOfAnAccountData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDetailsOfAnAccountResponses, GetDetailsOfAnAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/platform/api/v1/accounts/{account_id}',
        ...options
    });
};

/**
 * Update an account
 *
 * Update an account's attributes
 */
export const updateAnAccount = <ThrowOnError extends boolean = false>(options: Options<UpdateAnAccountData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateAnAccountResponses, UpdateAnAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/platform/api/v1/accounts/{account_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete an Account User
 *
 * Delete an Account User
 */
export const deleteAnAccountUser = <ThrowOnError extends boolean = false>(options: Options<DeleteAnAccountUserData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAnAccountUserResponses, DeleteAnAccountUserErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/platform/api/v1/accounts/{account_id}/account_users',
        ...options
    });
};

/**
 * List all Account Users
 *
 * List all account users
 */
export const listAllAccountUsers = <ThrowOnError extends boolean = false>(options: Options<ListAllAccountUsersData, ThrowOnError>) => {
    return (options.client ?? client).get<ListAllAccountUsersResponses, ListAllAccountUsersErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/platform/api/v1/accounts/{account_id}/account_users',
        ...options
    });
};

/**
 * Create an Account User
 *
 * Create an Account User
 */
export const createAnAccountUser = <ThrowOnError extends boolean = false>(options: Options<CreateAnAccountUserData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAnAccountUserResponses, CreateAnAccountUserErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/platform/api/v1/accounts/{account_id}/account_users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all AgentBots
 *
 * List all agent bots available
 */
export const listAllAgentBots = <ThrowOnError extends boolean = false>(options?: Options<ListAllAgentBotsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListAllAgentBotsResponses, ListAllAgentBotsErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/platform/api/v1/agent_bots',
        ...options
    });
};

/**
 * Create an Agent Bot
 *
 * Create an agent bot
 */
export const createAnAgentBot = <ThrowOnError extends boolean = false>(options: Options<CreateAnAgentBotData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAnAgentBotResponses, CreateAnAgentBotErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/platform/api/v1/agent_bots',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete an AgentBot
 *
 * Delete an AgentBot
 */
export const deleteAnAgentBot = <ThrowOnError extends boolean = false>(options: Options<DeleteAnAgentBotData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAnAgentBotResponses, DeleteAnAgentBotErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/platform/api/v1/agent_bots/{id}',
        ...options
    });
};

/**
 * Get an agent bot details
 *
 * Get the details of an agent bot
 */
export const getDetailsOfASingleAgentBot = <ThrowOnError extends boolean = false>(options: Options<GetDetailsOfASingleAgentBotData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDetailsOfASingleAgentBotResponses, GetDetailsOfASingleAgentBotErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/platform/api/v1/agent_bots/{id}',
        ...options
    });
};

/**
 * Update an agent bot
 *
 * Update an agent bot's attributes
 */
export const updateAnAgentBot = <ThrowOnError extends boolean = false>(options: Options<UpdateAnAgentBotData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateAnAgentBotResponses, UpdateAnAgentBotErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/platform/api/v1/agent_bots/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a User
 *
 * Create a User
 */
export const createAUser = <ThrowOnError extends boolean = false>(options: Options<CreateAuserData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAuserResponses, CreateAuserErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/platform/api/v1/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a User
 *
 * Delete a User
 */
export const deleteAUser = <ThrowOnError extends boolean = false>(options: Options<DeleteAuserData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAuserResponses, DeleteAuserErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/platform/api/v1/users/{id}',
        ...options
    });
};

/**
 * Get an user details
 *
 * Get the details of an user
 */
export const getDetailsOfAUser = <ThrowOnError extends boolean = false>(options: Options<GetDetailsOfAuserData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDetailsOfAuserResponses, GetDetailsOfAuserErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/platform/api/v1/users/{id}',
        ...options
    });
};

/**
 * Update a user
 *
 * Update a user's attributes
 */
export const updateAUser = <ThrowOnError extends boolean = false>(options: Options<UpdateAuserData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateAuserResponses, UpdateAuserErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/platform/api/v1/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get User SSO Link
 *
 * Get the sso link of a user
 */
export const getSsoUrlOfAUser = <ThrowOnError extends boolean = false>(options: Options<GetSsoUrlOfAuserData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSsoUrlOfAuserResponses, GetSsoUrlOfAuserErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/platform/api/v1/users/{id}/login',
        ...options
    });
};

/**
 * Inbox details
 *
 * Get the details of an inbox
 */
export const getDetailsOfAInbox = <ThrowOnError extends boolean = false>(options: Options<GetDetailsOfAInboxData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDetailsOfAInboxResponses, GetDetailsOfAInboxErrors, ThrowOnError>({
        url: '/public/api/v1/inboxes/{inbox_identifier}',
        ...options
    });
};

/**
 * Create a contact
 *
 * Create a contact
 */
export const createAContact = <ThrowOnError extends boolean = false>(options: Options<CreateAContactData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAContactResponses, CreateAContactErrors, ThrowOnError>({
        url: '/public/api/v1/inboxes/{inbox_identifier}/contacts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a contact
 *
 * Get the details of a contact
 */
export const getDetailsOfAContact = <ThrowOnError extends boolean = false>(options: Options<GetDetailsOfAContactData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDetailsOfAContactResponses, GetDetailsOfAContactErrors, ThrowOnError>({
        url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}',
        ...options
    });
};

/**
 * Update a contact
 *
 * Update a contact's attributes
 */
export const updateAContact = <ThrowOnError extends boolean = false>(options: Options<UpdateAContactData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateAContactResponses, UpdateAContactErrors, ThrowOnError>({
        url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all conversations
 *
 * List all conversations for the contact
 */
export const listAllContactConversations = <ThrowOnError extends boolean = false>(options: Options<ListAllContactConversationsData, ThrowOnError>) => {
    return (options.client ?? client).get<ListAllContactConversationsResponses, ListAllContactConversationsErrors, ThrowOnError>({
        url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations',
        ...options
    });
};

/**
 * Create a conversation
 *
 * Create a conversation
 */
export const createAConversation = <ThrowOnError extends boolean = false>(options: Options<CreateAConversationData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAConversationResponses, CreateAConversationErrors, ThrowOnError>({
        url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a single conversation
 *
 * Retrieves the details of a specific conversation
 */
export const getSingleConversation = <ThrowOnError extends boolean = false>(options: Options<GetSingleConversationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSingleConversationResponses, GetSingleConversationErrors, ThrowOnError>({
        url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations/{conversation_id}',
        ...options
    });
};

/**
 * Resolve a conversation
 *
 * Marks a conversation as resolved
 */
export const resolveConversation = <ThrowOnError extends boolean = false>(options: Options<ResolveConversationData, ThrowOnError>) => {
    return (options.client ?? client).post<ResolveConversationResponses, ResolveConversationErrors, ThrowOnError>({
        url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations/{conversation_id}/toggle_status',
        ...options
    });
};

/**
 * Toggle typing status
 *
 * Toggles the typing status in a conversation
 */
export const toggleTypingStatus = <ThrowOnError extends boolean = false>(options: Options<ToggleTypingStatusData, ThrowOnError>) => {
    return (options.client ?? client).post<ToggleTypingStatusResponses, ToggleTypingStatusErrors, ThrowOnError>({
        url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations/{conversation_id}/toggle_typing',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update last seen
 *
 * Updates the last seen time of the contact in a conversation
 */
export const updateLastSeen = <ThrowOnError extends boolean = false>(options: Options<UpdateLastSeenData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateLastSeenResponses, UpdateLastSeenErrors, ThrowOnError>({
        url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations/{conversation_id}/update_last_seen',
        ...options
    });
};

/**
 * List all messages
 *
 * List all messages in the conversation
 */
export const listAllConverationMessages = <ThrowOnError extends boolean = false>(options: Options<ListAllConverationMessagesData, ThrowOnError>) => {
    return (options.client ?? client).get<ListAllConverationMessagesResponses, ListAllConverationMessagesErrors, ThrowOnError>({
        url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations/{conversation_id}/messages',
        ...options
    });
};

/**
 * Create a message
 *
 * Create a message
 */
export const createAMessage = <ThrowOnError extends boolean = false>(options: Options<CreateAMessageData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAMessageResponses, CreateAMessageErrors, ThrowOnError>({
        url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations/{conversation_id}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update a message
 *
 * Update a message
 */
export const updateAMessage = <ThrowOnError extends boolean = false>(options: Options<UpdateAMessageData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateAMessageResponses, UpdateAMessageErrors, ThrowOnError>({
        url: '/public/api/v1/inboxes/{inbox_identifier}/contacts/{contact_identifier}/conversations/{conversation_id}/messages/{message_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get CSAT survey page
 *
 * You can redirect the client to this URL, instead of implementing the CSAT survey component yourself.
 */
export const getCsatSurveyPage = <ThrowOnError extends boolean = false>(options: Options<GetCsatSurveyPageData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCsatSurveyPageResponses, unknown, ThrowOnError>({
        url: '/survey/responses/{conversation_uuid}',
        ...options
    });
};

/**
 * Get account details
 *
 * Get the details of the current account
 */
export const getAccountDetails = <ThrowOnError extends boolean = false>(options: Options<GetAccountDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAccountDetailsResponses, GetAccountDetailsErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{id}',
        ...options
    });
};

/**
 * Update account
 *
 * Update account details, settings, and custom attributes
 */
export const updateAccount = <ThrowOnError extends boolean = false>(options: Options<UpdateAccountData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateAccountResponses, UpdateAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Audit Logs in Account
 *
 * Get Details of Audit Log entries for an Account. This endpoint is only available in Enterprise editions and requires the audit_logs feature to be enabled.
 */
export const getAccountAuditLogs = <ThrowOnError extends boolean = false>(options: Options<GetAccountAuditLogsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAccountAuditLogsResponses, GetAccountAuditLogsErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/audit_logs',
        ...options
    });
};

/**
 * List all AgentBots
 *
 * List all agent bots available for the current account
 */
export const listAllAccountAgentBots = <ThrowOnError extends boolean = false>(options: Options<ListAllAccountAgentBotsData, ThrowOnError>) => {
    return (options.client ?? client).get<ListAllAccountAgentBotsResponses, ListAllAccountAgentBotsErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/agent_bots',
        ...options
    });
};

/**
 * Create an Agent Bot
 *
 * Create an agent bot in the account
 */
export const createAnAccountAgentBot = <ThrowOnError extends boolean = false>(options: Options<CreateAnAccountAgentBotData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAnAccountAgentBotResponses, CreateAnAccountAgentBotErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/agent_bots',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete an AgentBot
 *
 * Delete an AgentBot from the account
 */
export const deleteAnAccountAgentBot = <ThrowOnError extends boolean = false>(options: Options<DeleteAnAccountAgentBotData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAnAccountAgentBotResponses, DeleteAnAccountAgentBotErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/agent_bots/{id}',
        ...options
    });
};

/**
 * Get an agent bot details
 *
 * Get the details of an agent bot in the account
 */
export const getDetailsOfASingleAccountAgentBot = <ThrowOnError extends boolean = false>(options: Options<GetDetailsOfASingleAccountAgentBotData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDetailsOfASingleAccountAgentBotResponses, GetDetailsOfASingleAccountAgentBotErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/agent_bots/{id}',
        ...options
    });
};

/**
 * Update an agent bot
 *
 * Update an agent bot's attributes
 */
export const updateAnAccountAgentBot = <ThrowOnError extends boolean = false>(options: Options<UpdateAnAccountAgentBotData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateAnAccountAgentBotResponses, UpdateAnAccountAgentBotErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/agent_bots/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Agents in Account
 *
 * Get Details of Agents in an Account
 */
export const getAccountAgents = <ThrowOnError extends boolean = false>(options: Options<GetAccountAgentsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAccountAgentsResponses, GetAccountAgentsErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/agents',
        ...options
    });
};

/**
 * Add a New Agent
 *
 * Add a new Agent to Account
 */
export const addNewAgentToAccount = <ThrowOnError extends boolean = false>(options: Options<AddNewAgentToAccountData, ThrowOnError>) => {
    return (options.client ?? client).post<AddNewAgentToAccountResponses, AddNewAgentToAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/agents',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove an Agent from Account
 *
 * Remove an Agent from Account
 */
export const deleteAgentFromAccount = <ThrowOnError extends boolean = false>(options: Options<DeleteAgentFromAccountData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAgentFromAccountResponses, DeleteAgentFromAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/agents/{id}',
        ...options
    });
};

/**
 * Update Agent in Account
 *
 * Update an Agent in Account
 */
export const updateAgentInAccount = <ThrowOnError extends boolean = false>(options: Options<UpdateAgentInAccountData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateAgentInAccountResponses, UpdateAgentInAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/agents/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all Canned Responses in an Account
 *
 * Get Details of Canned Responses in an Account
 */
export const getAccountCannedResponse = <ThrowOnError extends boolean = false>(options: Options<GetAccountCannedResponseData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAccountCannedResponseResponses, GetAccountCannedResponseErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/canned_responses',
        ...options
    });
};

/**
 * Add a New Canned Response
 *
 * Add a new Canned Response to Account
 */
export const addNewCannedResponseToAccount = <ThrowOnError extends boolean = false>(options: Options<AddNewCannedResponseToAccountData, ThrowOnError>) => {
    return (options.client ?? client).post<AddNewCannedResponseToAccountResponses, AddNewCannedResponseToAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/canned_responses',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove a Canned Response from Account
 *
 * Remove a Canned Response from Account
 */
export const deleteCannedResponseFromAccount = <ThrowOnError extends boolean = false>(options: Options<DeleteCannedResponseFromAccountData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteCannedResponseFromAccountResponses, DeleteCannedResponseFromAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/canned_responses/{id}',
        ...options
    });
};

/**
 * Update Canned Response in Account
 *
 * Update a Canned Response in Account
 */
export const updateCannedResponseInAccount = <ThrowOnError extends boolean = false>(options: Options<UpdateCannedResponseInAccountData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateCannedResponseInAccountResponses, UpdateCannedResponseInAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/canned_responses/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all custom attributes in an account
 *
 * Get details of custom attributes in an Account
 */
export const getAccountCustomAttribute = <ThrowOnError extends boolean = false>(options: Options<GetAccountCustomAttributeData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAccountCustomAttributeResponses, GetAccountCustomAttributeErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/custom_attribute_definitions',
        ...options
    });
};

/**
 * Add a new custom attribute
 *
 * Add a new custom attribute to account
 */
export const addNewCustomAttributeToAccount = <ThrowOnError extends boolean = false>(options: Options<AddNewCustomAttributeToAccountData, ThrowOnError>) => {
    return (options.client ?? client).post<AddNewCustomAttributeToAccountResponses, AddNewCustomAttributeToAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/custom_attribute_definitions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove a custom attribute from account
 *
 * Remove a custom attribute from account
 */
export const deleteCustomAttributeFromAccount = <ThrowOnError extends boolean = false>(options: Options<DeleteCustomAttributeFromAccountData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteCustomAttributeFromAccountResponses, DeleteCustomAttributeFromAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/custom_attribute_definitions/{id}',
        ...options
    });
};

/**
 * Get a custom attribute details
 *
 * Get the details of a custom attribute in the account
 */
export const getDetailsOfASingleCustomAttribute = <ThrowOnError extends boolean = false>(options: Options<GetDetailsOfASingleCustomAttributeData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDetailsOfASingleCustomAttributeResponses, GetDetailsOfASingleCustomAttributeErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/custom_attribute_definitions/{id}',
        ...options
    });
};

/**
 * Update custom attribute in Account
 *
 * Update a custom attribute in account
 */
export const updateCustomAttributeInAccount = <ThrowOnError extends boolean = false>(options: Options<UpdateCustomAttributeInAccountData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateCustomAttributeInAccountResponses, UpdateCustomAttributeInAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/custom_attribute_definitions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Contacts
 *
 * Listing all the resolved contacts with pagination (Page size = 15). Resolved contacts are the ones with a value for identifier, email or phone number
 */
export const contactList = <ThrowOnError extends boolean = false>(options: Options<ContactListData, ThrowOnError>) => {
    return (options.client ?? client).get<ContactListResponses, ContactListErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/contacts',
        ...options
    });
};

/**
 * Create Contact
 *
 * Create a new Contact
 */
export const contactCreate = <ThrowOnError extends boolean = false>(options: Options<ContactCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<ContactCreateResponses, ContactCreateErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/contacts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Contact
 *
 * Delete a contact belonging to the account using ID
 */
export const contactDelete = <ThrowOnError extends boolean = false>(options: Options<ContactDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<ContactDeleteResponses, ContactDeleteErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/contacts/{id}',
        ...options
    });
};

/**
 * Show Contact
 *
 * Get a contact belonging to the account using ID
 */
export const contactDetails = <ThrowOnError extends boolean = false>(options: Options<ContactDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<ContactDetailsResponses, ContactDetailsErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/contacts/{id}',
        ...options
    });
};

/**
 * Update Contact
 *
 * Update a contact belonging to the account using ID
 */
export const contactUpdate = <ThrowOnError extends boolean = false>(options: Options<ContactUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<ContactUpdateResponses, ContactUpdateErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/contacts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Contact Conversations
 *
 * Get conversations associated with that contact
 */
export const contactConversations = <ThrowOnError extends boolean = false>(options: Options<ContactConversationsData, ThrowOnError>) => {
    return (options.client ?? client).get<ContactConversationsResponses, ContactConversationsErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/contacts/{id}/conversations',
        ...options
    });
};

/**
 * List Labels
 *
 * Lists all the labels of a contact
 */
export const listAllLabelsOfAContact = <ThrowOnError extends boolean = false>(options: Options<ListAllLabelsOfAContactData, ThrowOnError>) => {
    return (options.client ?? client).get<ListAllLabelsOfAContactResponses, ListAllLabelsOfAContactErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/contacts/{id}/labels',
        ...options
    });
};

/**
 * Add Labels
 *
 * Add labels to a contact. Note that this API would overwrite the existing list of labels associated to the conversation.
 */
export const contactAddLabels = <ThrowOnError extends boolean = false>(options: Options<ContactAddLabelsData, ThrowOnError>) => {
    return (options.client ?? client).post<ContactAddLabelsResponses, ContactAddLabelsErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/contacts/{id}/labels',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Search Contacts
 *
 * Search the resolved contacts using a search key, currently supports email search (Page size = 15). Resolved contacts are the ones with a value for identifier, email or phone number
 */
export const contactSearch = <ThrowOnError extends boolean = false>(options: Options<ContactSearchData, ThrowOnError>) => {
    return (options.client ?? client).get<ContactSearchResponses, ContactSearchErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/contacts/search',
        ...options
    });
};

/**
 * Contact Filter
 *
 * Filter contacts with custom filter options and pagination
 */
export const contactFilter = <ThrowOnError extends boolean = false>(options: Options<ContactFilterData, ThrowOnError>) => {
    return (options.client ?? client).post<ContactFilterResponses, ContactFilterErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/contacts/filter',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create contact inbox
 *
 * Create a contact inbox record for an inbox
 */
export const contactInboxCreation = <ThrowOnError extends boolean = false>(options: Options<ContactInboxCreationData, ThrowOnError>) => {
    return (options.client ?? client).post<ContactInboxCreationResponses, ContactInboxCreationErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/contacts/{id}/contact_inboxes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Contactable Inboxes
 *
 * Get List of contactable Inboxes
 */
export const contactableInboxesGet = <ThrowOnError extends boolean = false>(options: Options<ContactableInboxesGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ContactableInboxesGetResponses, ContactableInboxesGetErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/contacts/{id}/contactable_inboxes',
        ...options
    });
};

/**
 * List all automation rules in an account
 *
 * Get details of automation rules in an Account
 */
export const getAccountAutomationRule = <ThrowOnError extends boolean = false>(options: Options<GetAccountAutomationRuleData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAccountAutomationRuleResponses, GetAccountAutomationRuleErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/automation_rules',
        ...options
    });
};

/**
 * Add a new automation rule
 *
 * Add a new automation rule to account
 */
export const addNewAutomationRuleToAccount = <ThrowOnError extends boolean = false>(options: Options<AddNewAutomationRuleToAccountData, ThrowOnError>) => {
    return (options.client ?? client).post<AddNewAutomationRuleToAccountResponses, AddNewAutomationRuleToAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/automation_rules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove a automation rule from account
 *
 * Remove a automation rule from account
 */
export const deleteAutomationRuleFromAccount = <ThrowOnError extends boolean = false>(options: Options<DeleteAutomationRuleFromAccountData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAutomationRuleFromAccountResponses, DeleteAutomationRuleFromAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/automation_rules/{id}',
        ...options
    });
};

/**
 * Get a automation rule details
 *
 * Get the details of a automation rule in the account
 */
export const getDetailsOfASingleAutomationRule = <ThrowOnError extends boolean = false>(options: Options<GetDetailsOfASingleAutomationRuleData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDetailsOfASingleAutomationRuleResponses, GetDetailsOfASingleAutomationRuleErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/automation_rules/{id}',
        ...options
    });
};

/**
 * Update automation rule in Account
 *
 * Update a automation rule in account
 */
export const updateAutomationRuleInAccount = <ThrowOnError extends boolean = false>(options: Options<UpdateAutomationRuleInAccountData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateAutomationRuleInAccountResponses, UpdateAutomationRuleInAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/automation_rules/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all portals in an account
 *
 * Get details of portals in an Account
 */
export const getPortal = <ThrowOnError extends boolean = false>(options: Options<GetPortalData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPortalResponses, GetPortalErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/portals',
        ...options
    });
};

/**
 * Add a new portal
 *
 * Add a new portal to account
 */
export const addNewPortalToAccount = <ThrowOnError extends boolean = false>(options: Options<AddNewPortalToAccountData, ThrowOnError>) => {
    return (options.client ?? client).post<AddNewPortalToAccountResponses, AddNewPortalToAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/portals',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update a portal
 *
 * Update a portal to account
 */
export const updatePortalToAccount = <ThrowOnError extends boolean = false>(options: Options<UpdatePortalToAccountData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdatePortalToAccountResponses, UpdatePortalToAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/portals/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add a new category
 *
 * Add a new category to portal
 */
export const addNewCategoryToAccount = <ThrowOnError extends boolean = false>(options: Options<AddNewCategoryToAccountData, ThrowOnError>) => {
    return (options.client ?? client).post<AddNewCategoryToAccountResponses, AddNewCategoryToAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/portals/{id}/categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add a new article
 *
 * Add a new article to portal
 */
export const addNewArticleToAccount = <ThrowOnError extends boolean = false>(options: Options<AddNewArticleToAccountData, ThrowOnError>) => {
    return (options.client ?? client).post<AddNewArticleToAccountResponses, AddNewArticleToAccountErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/portals/{id}/articles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Conversation Counts
 *
 * Get open, unassigned and all Conversation counts
 */
export const conversationListMeta = <ThrowOnError extends boolean = false>(options: Options<ConversationListMetaData, ThrowOnError>) => {
    return (options.client ?? client).get<ConversationListMetaResponses, ConversationListMetaErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/conversations/meta',
        ...options
    });
};

/**
 * Conversations List
 *
 * List all the conversations with pagination
 */
export const conversationList = <ThrowOnError extends boolean = false>(options: Options<ConversationListData, ThrowOnError>) => {
    return (options.client ?? client).get<ConversationListResponses, ConversationListErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/conversations',
        ...options
    });
};

/**
 * Create New Conversation
 *
 * Creating a conversation in chatwoot requires a source id.
 *
 * Learn more about source_id: https://www.chatwoot.com/hc/user-guide/articles/1677839703-how-to-create-an-api-channel-inbox#send-messages-to-the-api-channel
 */
export const newConversation = <ThrowOnError extends boolean = false>(options: Options<NewConversationData, ThrowOnError>) => {
    return (options.client ?? client).post<NewConversationResponses, NewConversationErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            },
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/conversations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Conversations Filter
 *
 * Filter conversations with custom filter options and pagination
 */
export const conversationFilter = <ThrowOnError extends boolean = false>(options: Options<ConversationFilterData, ThrowOnError>) => {
    return (options.client ?? client).post<ConversationFilterResponses, ConversationFilterErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/conversations/filter',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Conversation Details
 *
 * Get all details regarding a conversation with all messages in the conversation
 */
export const getDetailsOfAConversation = <ThrowOnError extends boolean = false>(options: Options<GetDetailsOfAConversationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDetailsOfAConversationResponses, GetDetailsOfAConversationErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}',
        ...options
    });
};

/**
 * Update Conversation
 *
 * Update Conversation Attributes
 */
export const updateConversation = <ThrowOnError extends boolean = false>(options: Options<UpdateConversationData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateConversationResponses, UpdateConversationErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            },
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Toggle Status
 *
 * Toggle the status of a conversation. Pass `status` to explicitly set the
 * conversation state. Use `snoozed` along with `snoozed_until` to snooze a
 * conversation until a specific time. If `snoozed_until` is omitted, the
 * conversation is snoozed until the next reply from the contact. Regardless
 * of the value provided, snoozed conversations always reopen on the next
 * reply from the contact.
 */
export const toggleStatusOfAConversation = <ThrowOnError extends boolean = false>(options: Options<ToggleStatusOfAConversationData, ThrowOnError>) => {
    return (options.client ?? client).post<ToggleStatusOfAConversationResponses, ToggleStatusOfAConversationErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            },
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/toggle_status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Toggle Priority
 *
 * Toggles the priority of conversation
 */
export const togglePriorityOfAConversation = <ThrowOnError extends boolean = false>(options: Options<TogglePriorityOfAConversationData, ThrowOnError>) => {
    return (options.client ?? client).post<TogglePriorityOfAConversationResponses, TogglePriorityOfAConversationErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            },
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/toggle_priority',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Custom Attributes
 *
 * Updates the custom attributes of a conversation
 */
export const updateCustomAttributesOfAConversation = <ThrowOnError extends boolean = false>(options: Options<UpdateCustomAttributesOfAConversationData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateCustomAttributesOfAConversationResponses, UpdateCustomAttributesOfAConversationErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/custom_attributes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Assign Conversation
 *
 * Assign a conversation to an agent or a team
 */
export const assignAConversation = <ThrowOnError extends boolean = false>(options: Options<AssignAConversationData, ThrowOnError>) => {
    return (options.client ?? client).post<AssignAConversationResponses, AssignAConversationErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            },
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/assignments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Labels
 *
 * Lists all the labels of a conversation
 */
export const listAllLabelsOfAConversation = <ThrowOnError extends boolean = false>(options: Options<ListAllLabelsOfAConversationData, ThrowOnError>) => {
    return (options.client ?? client).get<ListAllLabelsOfAConversationResponses, ListAllLabelsOfAConversationErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/labels',
        ...options
    });
};

/**
 * Add Labels
 *
 * Add labels to a conversation. Note that this API would overwrite the existing list of labels associated to the conversation.
 */
export const conversationAddLabels = <ThrowOnError extends boolean = false>(options: Options<ConversationAddLabelsData, ThrowOnError>) => {
    return (options.client ?? client).post<ConversationAddLabelsResponses, ConversationAddLabelsErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/labels',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all inboxes
 *
 * List all inboxes available in the current account
 */
export const listAllInboxes = <ThrowOnError extends boolean = false>(options: Options<ListAllInboxesData, ThrowOnError>) => {
    return (options.client ?? client).get<ListAllInboxesResponses, ListAllInboxesErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/inboxes',
        ...options
    });
};

/**
 * Get an inbox
 *
 * Get an inbox available in the current account
 */
export const getInbox = <ThrowOnError extends boolean = false>(options: Options<GetInboxData, ThrowOnError>) => {
    return (options.client ?? client).get<GetInboxResponses, GetInboxErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/inboxes/{id}/',
        ...options
    });
};

/**
 * Create an inbox
 *
 * You can create more than one website inbox in each account
 */
export const inboxCreation = <ThrowOnError extends boolean = false>(options: Options<InboxCreationData, ThrowOnError>) => {
    return (options.client ?? client).post<InboxCreationResponses, InboxCreationErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/inboxes/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Inbox
 *
 * Update an existing inbox
 */
export const updateInbox = <ThrowOnError extends boolean = false>(options: Options<UpdateInboxData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateInboxResponses, UpdateInboxErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/inboxes/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Show Inbox Agent Bot
 *
 * See if an agent bot is associated to the Inbox
 */
export const getInboxAgentBot = <ThrowOnError extends boolean = false>(options: Options<GetInboxAgentBotData, ThrowOnError>) => {
    return (options.client ?? client).get<GetInboxAgentBotResponses, GetInboxAgentBotErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/inboxes/{id}/agent_bot',
        ...options
    });
};

/**
 * Add or remove agent bot
 *
 * To add an agent bot pass agent_bot id, to remove agent bot from an inbox pass null
 */
export const updateAgentBot = <ThrowOnError extends boolean = false>(options: Options<UpdateAgentBotData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateAgentBotResponses, UpdateAgentBotErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/inboxes/{id}/set_agent_bot',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Agents in Inbox
 *
 * Get Details of Agents in an Inbox
 */
export const getInboxMembers = <ThrowOnError extends boolean = false>(options: Options<GetInboxMembersData, ThrowOnError>) => {
    return (options.client ?? client).get<GetInboxMembersResponses, GetInboxMembersErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/inbox_members/{inbox_id}',
        ...options
    });
};

/**
 * Remove an Agent from Inbox
 *
 * Remove an Agent from Inbox
 */
export const deleteAgentInInbox = <ThrowOnError extends boolean = false>(options: Options<DeleteAgentInInboxData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAgentInInboxResponses, DeleteAgentInInboxErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/inbox_members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Agents in Inbox
 *
 * All agents except the one passed in params will be removed
 */
export const updateAgentsInInbox = <ThrowOnError extends boolean = false>(options: Options<UpdateAgentsInInboxData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateAgentsInInboxResponses, UpdateAgentsInInboxErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/inbox_members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add a New Agent
 *
 * Add a new Agent to Inbox
 */
export const addNewAgentToInbox = <ThrowOnError extends boolean = false>(options: Options<AddNewAgentToInboxData, ThrowOnError>) => {
    return (options.client ?? client).post<AddNewAgentToInboxResponses, AddNewAgentToInboxErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/inbox_members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get messages
 *
 * List all messages of a conversation
 */
export const listAllMessages = <ThrowOnError extends boolean = false>(options: Options<ListAllMessagesData, ThrowOnError>) => {
    return (options.client ?? client).get<ListAllMessagesResponses, ListAllMessagesErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/messages',
        ...options
    });
};

/**
 * Create New Message
 *
 * Create a new message in the conversation.
 *
 * ## WhatsApp Template Messages
 *
 * For WhatsApp channels, you can send structured template messages using the `template_params` field.
 * Templates must be pre-approved in WhatsApp Business Manager.
 *
 * ### Example Templates
 *
 * **Text with Image Header:**
 * ```json
 * {
 * "content": "Hi your order 121212 is confirmed. Please wait for further updates",
 * "template_params": {
 * "name": "order_confirmation",
 * "category": "MARKETING",
 * "language": "en",
 * "processed_params": {
 * "body": {
 * "1": "121212"
 * },
 * "header": {
 * "media_url": "https://picsum.photos/200/300",
 * "media_type": "image"
 * }
 * }
 * }
 * }
 * ```
 *
 * **Text with Copy Code Button:**
 * ```json
 * {
 * "content": "Special offer! Get 30% off your next purchase. Use the code below",
 * "template_params": {
 * "name": "discount_coupon",
 * "category": "MARKETING",
 * "language": "en",
 * "processed_params": {
 * "body": {
 * "discount_percentage": "30"
 * },
 * "buttons": [{
 * "type": "copy_code",
 * "parameter": "SAVE20"
 * }]
 * }
 * }
 * }
 * ```
 *
 */
export const createANewMessageInAConversation = <ThrowOnError extends boolean = false>(options: Options<CreateANewMessageInAConversationData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateANewMessageInAConversationResponses, CreateANewMessageInAConversationErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            },
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a message
 *
 * Delete a message and it's attachments from the conversation.
 */
export const deleteAMessage = <ThrowOnError extends boolean = false>(options: Options<DeleteAMessageData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAMessageResponses, DeleteAMessageErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/conversations/{conversation_id}/messages/{message_id}',
        ...options
    });
};

/**
 * List all the Integrations
 *
 * Get the details of all Integrations available for the account
 */
export const getDetailsOfAllIntegrations = <ThrowOnError extends boolean = false>(options: Options<GetDetailsOfAllIntegrationsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDetailsOfAllIntegrationsResponses, GetDetailsOfAllIntegrationsErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/integrations/apps',
        ...options
    });
};

/**
 * Create an integration hook
 *
 * Create an integration hook
 */
export const createAnIntegrationHook = <ThrowOnError extends boolean = false>(options: Options<CreateAnIntegrationHookData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAnIntegrationHookResponses, CreateAnIntegrationHookErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/integrations/hooks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete an Integration Hook
 *
 * Delete an Integration Hook
 */
export const deleteAnIntegrationHook = <ThrowOnError extends boolean = false>(options: Options<DeleteAnIntegrationHookData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAnIntegrationHookResponses, DeleteAnIntegrationHookErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/integrations/hooks/{hook_id}',
        ...options
    });
};

/**
 * Update an Integration Hook
 *
 * Update an Integration Hook
 */
export const updateAnIntegrationsHook = <ThrowOnError extends boolean = false>(options: Options<UpdateAnIntegrationsHookData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateAnIntegrationsHookResponses, UpdateAnIntegrationsHookErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/integrations/hooks/{hook_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch user profile
 *
 * Get the user profile details
 */
export const fetchProfile = <ThrowOnError extends boolean = false>(options?: Options<FetchProfileData, ThrowOnError>) => {
    return (options?.client ?? client).get<FetchProfileResponses, FetchProfileErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/profile',
        ...options
    });
};

/**
 * List all teams
 *
 * List all teams available in the current account
 */
export const listAllTeams = <ThrowOnError extends boolean = false>(options: Options<ListAllTeamsData, ThrowOnError>) => {
    return (options.client ?? client).get<ListAllTeamsResponses, ListAllTeamsErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/teams',
        ...options
    });
};

/**
 * Create a team
 *
 * Create a team in the account
 */
export const createATeam = <ThrowOnError extends boolean = false>(options: Options<CreateATeamData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateATeamResponses, CreateATeamErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/teams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a team
 *
 * Delete a team from the account
 */
export const deleteATeam = <ThrowOnError extends boolean = false>(options: Options<DeleteATeamData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteATeamResponses, DeleteATeamErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/teams/{team_id}',
        ...options
    });
};

/**
 * Get a team details
 *
 * Get the details of a team in the account
 */
export const getDetailsOfASingleTeam = <ThrowOnError extends boolean = false>(options: Options<GetDetailsOfASingleTeamData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDetailsOfASingleTeamResponses, GetDetailsOfASingleTeamErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/teams/{team_id}',
        ...options
    });
};

/**
 * Update a team
 *
 * Update a team's attributes
 */
export const updateATeam = <ThrowOnError extends boolean = false>(options: Options<UpdateATeamData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateATeamResponses, UpdateATeamErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/teams/{team_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove an Agent from Team
 *
 * Remove an Agent from Team
 */
export const deleteAgentInTeam = <ThrowOnError extends boolean = false>(options: Options<DeleteAgentInTeamData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAgentInTeamResponses, DeleteAgentInTeamErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/teams/{team_id}/team_members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Agents in Team
 *
 * Get Details of Agents in an Team
 */
export const getTeamMembers = <ThrowOnError extends boolean = false>(options: Options<GetTeamMembersData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTeamMembersResponses, GetTeamMembersErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/teams/{team_id}/team_members',
        ...options
    });
};

/**
 * Update Agents in Team
 *
 * All agents except the one passed in params will be removed
 */
export const updateAgentsInTeam = <ThrowOnError extends boolean = false>(options: Options<UpdateAgentsInTeamData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateAgentsInTeamResponses, UpdateAgentsInTeamErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/teams/{team_id}/team_members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add a New Agent
 *
 * Add a new Agent to Team
 */
export const addNewAgentToTeam = <ThrowOnError extends boolean = false>(options: Options<AddNewAgentToTeamData, ThrowOnError>) => {
    return (options.client ?? client).post<AddNewAgentToTeamResponses, AddNewAgentToTeamErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/teams/{team_id}/team_members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all custom filters
 *
 * List all custom filters in a category of a user
 */
export const listAllFilters = <ThrowOnError extends boolean = false>(options: Options<ListAllFiltersData, ThrowOnError>) => {
    return (options.client ?? client).get<ListAllFiltersResponses, ListAllFiltersErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/custom_filters',
        ...options
    });
};

/**
 * Create a custom filter
 *
 * Create a custom filter in the account
 */
export const createACustomFilter = <ThrowOnError extends boolean = false>(options: Options<CreateACustomFilterData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateACustomFilterResponses, CreateACustomFilterErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/custom_filters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a custom filter
 *
 * Delete a custom filter from the account
 */
export const deleteACustomFilter = <ThrowOnError extends boolean = false>(options: Options<DeleteACustomFilterData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteACustomFilterResponses, DeleteACustomFilterErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/custom_filters/{custom_filter_id}',
        ...options
    });
};

/**
 * Get a custom filter details
 *
 * Get the details of a custom filter in the account
 */
export const getDetailsOfASingleCustomFilter = <ThrowOnError extends boolean = false>(options: Options<GetDetailsOfASingleCustomFilterData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDetailsOfASingleCustomFilterResponses, GetDetailsOfASingleCustomFilterErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/custom_filters/{custom_filter_id}',
        ...options
    });
};

/**
 * Update a custom filter
 *
 * Update a custom filter's attributes
 */
export const updateACustomFilter = <ThrowOnError extends boolean = false>(options: Options<UpdateACustomFilterData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateACustomFilterResponses, UpdateACustomFilterErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/custom_filters/{custom_filter_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all webhooks
 *
 * List all webhooks in the account
 */
export const listAllWebhooks = <ThrowOnError extends boolean = false>(options: Options<ListAllWebhooksData, ThrowOnError>) => {
    return (options.client ?? client).get<ListAllWebhooksResponses, ListAllWebhooksErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/webhooks',
        ...options
    });
};

/**
 * Add a webhook
 *
 * Add a webhook subscription to the account
 */
export const createAWebhook = <ThrowOnError extends boolean = false>(options: Options<CreateAWebhookData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAWebhookResponses, CreateAWebhookErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/webhooks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a webhook
 *
 * Delete a webhook from the account
 */
export const deleteAWebhook = <ThrowOnError extends boolean = false>(options: Options<DeleteAWebhookData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAWebhookResponses, DeleteAWebhookErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/webhooks/{webhook_id}',
        ...options
    });
};

/**
 * Update a webhook object
 *
 * Update a webhook object in the account
 */
export const updateAWebhook = <ThrowOnError extends boolean = false>(options: Options<UpdateAWebhookData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateAWebhookResponses, UpdateAWebhookErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/accounts/{account_id}/webhooks/{webhook_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Account reports
 *
 * Get Account reports for a specific type, metric and date range
 */
export const listAllConversationStatistics = <ThrowOnError extends boolean = false>(options: Options<ListAllConversationStatisticsData, ThrowOnError>) => {
    return (options.client ?? client).get<ListAllConversationStatisticsResponses, ListAllConversationStatisticsErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/accounts/{account_id}/reports',
        ...options
    });
};

/**
 * Get Account reports summary
 *
 * Get Account reports summary for a specific type and date range
 */
export const listAllConversationStatisticsSummary = <ThrowOnError extends boolean = false>(options: Options<ListAllConversationStatisticsSummaryData, ThrowOnError>) => {
    return (options.client ?? client).get<ListAllConversationStatisticsSummaryResponses, ListAllConversationStatisticsSummaryErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/accounts/{account_id}/reports/summary',
        ...options
    });
};

/**
 * Account Conversation Metrics
 *
 * Get conversation metrics for Account
 */
export const getAccountConversationMetrics = <ThrowOnError extends boolean = false>(options: Options<GetAccountConversationMetricsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAccountConversationMetricsResponses, GetAccountConversationMetricsErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/accounts/{account_id}/reports/conversations',
        ...options
    });
};

/**
 * Agent Conversation Metrics
 *
 * Get conversation metrics for Agent
 */
export const getAgentConversationMetrics = <ThrowOnError extends boolean = false>(options: Options<GetAgentConversationMetricsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAgentConversationMetricsResponses, GetAgentConversationMetricsErrors, ThrowOnError>({
        security: [
            {
                name: 'api_access_token',
                type: 'apiKey'
            }
        ],
        url: '/api/v2/accounts/{account_id}/reports/conversations/',
        ...options
    });
};

/**
 * Get messages from a conversation
 *
 * Returns all messages from a specific conversation
 */
export const getConversationMessages = <ThrowOnError extends boolean = false>(options: Options<GetConversationMessagesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetConversationMessagesResponses, unknown, ThrowOnError>({
        url: '/accounts/{account_id}/conversations/{conversation_id}/messages',
        ...options
    });
};
